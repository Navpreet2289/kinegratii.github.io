<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kinegratii的博客</title>
  
  <subtitle>逍遥于天地之间，而心意自得。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kinegratii.github.io/"/>
  <updated>2018-05-01T13:50:30.451Z</updated>
  <id>http://kinegratii.github.io/</id>
  
  <author>
    <name>Kinegratii</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>圈复杂度和McCabe</title>
    <link href="http://kinegratii.github.io/2018/04/08/cyclomatic-complexity-and-mccabe/"/>
    <id>http://kinegratii.github.io/2018/04/08/cyclomatic-complexity-and-mccabe/</id>
    <published>2018-04-08T11:40:35.000Z</published>
    <updated>2018-05-01T13:50:30.451Z</updated>
    
    <content type="html"><![CDATA[<p>圈复杂度（Cyclomatic Complexity）是衡量计算机程序复杂程度的一种措施。它根据程序从开始到结束的线性独立路径的数量计算得来的。在 Python 中可以使用 mccabe 包测量程序的圈复杂度。</p><a id="more"></a><h2 id="1-圈复杂度"><a href="#1-圈复杂度" class="headerlink" title="1 圈复杂度"></a>1 圈复杂度</h2><p>对于没有任何分支的代码，它的圈复杂度为 1 ，意味着代码只有一条路径。例如下面的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><p>对于有一条分支的代码，它的圈复杂度为 2 ，比如下面递归计算阶乘的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><p>在 1976 年， Thomas J. McCabe 开发了使用有向图计算复杂的算法。为了得到这个指标，程序控制流程图可以画成一个有向图，其中：</p><ul><li>节点表示一个程序块</li><li>边表示从一个程序块到另一个程序块的控制流</li></ul><p>根据程序的控制图，McCabe 复杂度可以表示为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">M = E - N + 2P</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>E：边的数量</li><li>N：节点的数量</li><li>P：连接组件的数量</li></ul><h2 id="2-McCabe的使用"><a href="#2-McCabe的使用" class="headerlink" title="2 McCabe的使用"></a>2 McCabe的使用</h2><p>在 Python 中可以使用 McCabe 包测量程序的圈复杂度。它可以当作一个独立的模块，也可以当作程序的一个插件。可以使用 pip 安装模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mccabe</span><br></pre></td></tr></table></figure><h3 id="2-1-作为命令行使用"><a href="#2-1-作为命令行使用" class="headerlink" title="2.1 作为命令行使用"></a>2.1 作为命令行使用</h3><p>和 <code>unittest</code> 、<code>flake8</code> 等工具一样。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> python -m mccabe --min 5 mccabe.py</span><br><span class="line">("185:1: 'PathGraphingAstVisitor.visitIf'", 5)</span><br><span class="line">("71:1: 'PathGraph.to_dot'", 5)</span><br><span class="line">("245:1: 'McCabeChecker.run'", 5)</span><br><span class="line">("283:1: 'main'", 7)</span><br><span class="line">("203:1: 'PathGraphingAstVisitor.visitTryExcept'", 5)</span><br><span class="line">("257:1: 'get_code_complexity'", 5)</span><br></pre></td></tr></table></figure><h3 id="2-2-作为-flake8-插件"><a href="#2-2-作为-flake8-插件" class="headerlink" title="2.2 作为 flake8 插件"></a>2.2 作为 flake8 插件</h3><p>当 flake8 版本在 2.0 以上和 McCabe 已经安装的情况下，该插件可用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ flake8 --version</span><br><span class="line">2.0 (pep8: 1.4.2, pyflakes: 0.6.1, mccabe: 0.2)</span><br></pre></td></tr></table></figure><p>在命令中使用 <code>--max-complexity</code> 选项即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ flake8 --max-complexity 10 coolproject</span><br><span class="line">...</span><br><span class="line">coolproject/mod.py:1204:1: C901 &apos;CoolFactory.prepare&apos; is too complex (14)</span><br></pre></td></tr></table></figure><p>根据 McCabe 圈复杂度大于 10 ，就认为是 too complex ，需要进行重构以降低复杂度。</p><h2 id="3-程序控制图"><a href="#3-程序控制图" class="headerlink" title="3 程序控制图"></a>3 程序控制图</h2><h3 id="3-1-生成程序控制图"><a href="#3-1-生成程序控制图" class="headerlink" title="3.1 生成程序控制图"></a>3.1 生成程序控制图</h3><p>以上述 <code>factorial</code> 函数代码为例子，将其保存为一个 <em>factorial.py</em> 文件中，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><p>第一步 使用 <code>python -m mccabe factorial.py -d</code></p><p>输出 dot 文本图形描述语言的有向图。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">graph &#123;</span><br><span class="line">subgraph &#123;</span><br><span class="line">node [shape=circle,label=&quot;If 4&quot;] 2187726207240;</span><br><span class="line">node [shape=circle,label=&quot;3:0: &apos;factorial&apos;&quot;] 2187726207016;</span><br><span class="line">node [shape=circle,label=&quot;Stmt 5&quot;] 2187726207408;</span><br><span class="line">node [shape=point,label=&quot;&quot;] 2187726207296;</span><br><span class="line">node [shape=circle,label=&quot;Stmt 7&quot;] 2187726207520;</span><br><span class="line">2187726207240 -- 2187726207408;</span><br><span class="line">2187726207240 -- 2187726207520;</span><br><span class="line">2187726207016 -- 2187726207240;</span><br><span class="line">2187726207408 -- 2187726207296;</span><br><span class="line">2187726207520 -- 2187726207296;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步，Graphviz渲染图片</p><p><a href="http://www.graphviz.org/" target="_blank" rel="noopener">Graphviz</a> 是 AT&amp;T Labs Research开发的图形绘制工具软件.它使用一个特定的DSL(领域特定语言): dot作为脚本语言，然后使用布局引擎来解析此脚本，并完成自动布局。graphviz提供丰富的导出格式，如常用的图片格式，SVG，PDF格式等。</p><p>打开 Graphviz 编辑器，将上述文档保存为 factorial.gv 文档，生成程序控制图。</p><p><img src="/images/factorial.png" alt="factorial.gv"></p><p>第三步，计算 McCabe 复杂度</p><p>根据公式，复杂度： M = 5 - 4 + 2 x 1 = 2</p><h2 id="4-降低复杂度"><a href="#4-降低复杂度" class="headerlink" title="4 降低复杂度"></a>4 降低复杂度</h2><p>使用字典替代复杂的 <em>if-else</em> 分支代码是 Python 中降低复杂度一个有效的方法。</p><p>比如可以将下面的分支代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="string">'a'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="string">'b'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">9</span></span><br></pre></td></tr></table></figure><p>改为下面的字典映射代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'a'</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">'b'</span>: <span class="number">2</span></span><br><span class="line">    &#125;.get(x, <span class="number">9</span>)</span><br></pre></td></tr></table></figure><p>复杂度也从 3 降低到 1 。</p><h2 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5 参考资料"></a>5 参考资料</h2><ul><li><a href="https://www.amazon.com/Software-Architecture-Python-Balachandran-Pillai/dp/1786468522" target="_blank" rel="noopener">Software Architecture with Python</a></li><li><a href="http://www.aosabook.org/en/index.html" target="_blank" rel="noopener">The Architecture of Open Source Applications</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;圈复杂度（Cyclomatic Complexity）是衡量计算机程序复杂程度的一种措施。它根据程序从开始到结束的线性独立路径的数量计算得来的。在 Python 中可以使用 mccabe 包测量程序的圈复杂度。&lt;/p&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://kinegratii.github.io/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="软件架构" scheme="http://kinegratii.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>pyecharts：改善渲染效率</title>
    <link href="http://kinegratii.github.io/2018/03/03/make-chart-render-faster/"/>
    <id>http://kinegratii.github.io/2018/03/03/make-chart-render-faster/</id>
    <published>2018-03-03T15:34:08.000Z</published>
    <updated>2018-05-01T13:50:30.451Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文已收录于 <a href="/pyecharts-project/">《pyecharts 开发专辑》</a> 。</p></blockquote><p>本文所述的基于特性 v0.3.3 版本，预计于 v0.3.4 / v0.4.0 加入。</p><a id="more"></a><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>一直以来， pyecharts 都是推荐使用下面的方式多次渲染图表。</p><p><em>代码 1</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Bar, Line</span><br><span class="line"></span><br><span class="line">bar = Bar(<span class="string">"直方图示例"</span>)</span><br><span class="line">bar.add()</span><br><span class="line">bar.render(path=<span class="string">'bar.html'</span>)</span><br><span class="line"></span><br><span class="line">line = Line(<span class="string">"测试图表"</span>)</span><br><span class="line">line.add()</span><br><span class="line">bar.render(path=<span class="string">'line.html'</span>)</span><br></pre></td></tr></table></figure><p>但历经多次版本迭代后，该代码效率有所降低。 <code>chart.render</code> 函数调用了 <code>engine.render</code> 函数，该函数源码如下：</p><p><em>代码 2</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(template_file, notebook=False, **context)</span>:</span></span><br><span class="line">    config = conf.CURRENT_CONFIG</span><br><span class="line">    echarts_env = EchartsEnvironment(</span><br><span class="line">        pyecharts_config=config,</span><br><span class="line">        loader=FileSystemLoader(</span><br><span class="line">            [config.echarts_template_dir, conf.DEFAULT_TEMPLATE_DIR])</span><br><span class="line">    )</span><br><span class="line">    template = echarts_env.get_template(template_file)</span><br><span class="line">    <span class="keyword">return</span> template.render(**context)</span><br></pre></td></tr></table></figure><p>可以看出，每调用一次都会重新创建一个 <code>EchartsEnvironment</code> 实例，问题在于 <code>EchartsEnvironment</code> 引擎对象并不是一个简单的数据存储型对象，每次对象的创建都需要花费大量时间，特别是寻找和编译模板文件，而且在对象创建后就无法修改。</p><p>在上述使用示例中，二者的所使用的引擎对象配置是一样的但需要创建两次，无形中降低了执行效率。</p><h2 id="使用底层API"><a href="#使用底层API" class="headerlink" title="使用底层API"></a>使用底层API</h2><p>基于第一节所述的问题，改成只创建一次引擎对象，基本代码如下：</p><p><em>代码 3</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Bar, Line</span><br><span class="line"><span class="keyword">from</span> pyecharts.conf <span class="keyword">import</span> PyEchartsConfig</span><br><span class="line"><span class="keyword">from</span> pyecharts.engine <span class="keyword">import</span> EchartsEnvironment</span><br><span class="line"><span class="keyword">from</span> pyecharts.utils <span class="keyword">import</span> write_utf8_html_file</span><br><span class="line"></span><br><span class="line">bar = Bar(<span class="string">"直方图示例"</span>)</span><br><span class="line">bar.add()</span><br><span class="line"></span><br><span class="line">line = Line(<span class="string">"测试图表"</span>)</span><br><span class="line">line.add()</span><br><span class="line"></span><br><span class="line">config = PyEchartsConfig()</span><br><span class="line">env = EchartsEnvironment(pyecharts_config=config)</span><br><span class="line">tpl = env.get_template(<span class="string">'simple_chart.html'</span>)</span><br><span class="line"></span><br><span class="line">html = tpl.render(chart=bar)</span><br><span class="line">write_utf8_html_file(<span class="string">'bar.html'</span>, html)</span><br><span class="line"></span><br><span class="line">html = tpl.render(chart=line)</span><br><span class="line">write_utf8_html_file(<span class="string">'line.html'</span>, html)</span><br></pre></td></tr></table></figure><p>显然和第一节相比，该代码使用了更为底层的 API，虽然符合一般的渲染过程 （参见 <a href="http://pyecharts.org/#/zh-cn/api?id=%e6%80%bb%e4%bd%93%e6%b5%81%e7%a8%8b" target="_blank" rel="noopener">文档-图表api</a>），但是使用者需要了解一些更为底层的内部逻辑，方便性有所下降。</p><ul><li>比如使用了<code>write_utf8_html_file</code> 这个工具方法</li><li>需要使用者显式指定 <code>simple_chart.html</code> 模板文件，之前是作为默认参数</li></ul><h2 id="改进方案（一）"><a href="#改进方案（一）" class="headerlink" title="改进方案（一）"></a>改进方案（一）</h2><p>第一种改进是基于第一份代码，直接使用  “Lazy Object” 方式，实现只有一个 <code>EchartsEnvironment</code>  的单例对象，关于具体细节可以查看之前的 <a href="https://github.com/pyecharts/pyecharts/pull/240" target="_blank" rel="noopener">PR 240</a>  。</p><h2 id="改进方案（二）"><a href="#改进方案（二）" class="headerlink" title="改进方案（二）"></a>改进方案（二）</h2><p>第二种方案是基于第二份代码，并对此作一些封装。实现要点在于：</p><ul><li><code>EchartsEnvironment</code>   增加 <code>render_chart</code> 方法，参数与 现有的 <code>chart.render</code> 基本上相同</li><li><code>Chart.render</code> 直接调用 <code>EchartsEnvironment.render_chart</code> 方法</li><li>原有的 <code>engine.render</code> 和 <code>engine.render_notebook</code> 合并，等到 notebook 整合后直接移除，实际上已经向下移到 <code>EchartsEnvironment</code> 类了</li></ul><p>实例代码</p><p><em>代码 4</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EchartsEnvironment</span><span class="params">(BaseEnvironment)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Built-in jinja2 template engine for pyecharts</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, pyecharts_config=None, *args, **kwargs)</span>:</span></span><br><span class="line">        pyecharts_config = pyecharts_config <span class="keyword">or</span> conf.PyEchartsConfig()</span><br><span class="line">        loader = kwargs.pop(<span class="string">'loader'</span>, <span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">if</span> loader <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            loader = FileSystemLoader(pyecharts_config.echarts_template_dir)</span><br><span class="line">        super(EchartsEnvironment, self).__init__(</span><br><span class="line">            pyecharts_config=pyecharts_config,</span><br><span class="line">            keep_trailing_newline=<span class="keyword">True</span>,</span><br><span class="line">            trim_blocks=<span class="keyword">True</span>,</span><br><span class="line">            lstrip_blocks=<span class="keyword">True</span>,</span><br><span class="line">            loader=loader,</span><br><span class="line">            *args,</span><br><span class="line">            **kwargs)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">render_chart_to_file</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        self,</span></span></span><br><span class="line"><span class="function"><span class="params">        chart,</span></span></span><br><span class="line"><span class="function"><span class="params">        object_name=<span class="string">'chart'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        path=<span class="string">'render.html'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        template_name=<span class="string">'simple_chart.html'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        extra_context=None</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span>:</span></span><br><span class="line">        context = &#123;object_name: chart&#125;</span><br><span class="line">        context.update(extra_context <span class="keyword">or</span> &#123;&#125;)</span><br><span class="line">        tpl = self.get_template(template_name)</span><br><span class="line">        html = tpl.render(**context)</span><br><span class="line">        write_utf8_html_file(path, html)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">render_chart_to_notebook</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>单个图表实现方式，<code>Base.render</code> 直接调用 <code>env.render_chart_to_file</code> 函数。</p><p><em>代码 5</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(self,</span></span></span><br><span class="line"><span class="function"><span class="params">               path=<span class="string">'render.html'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">               template_name=<span class="string">'simple_chart.html'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">               object_name=<span class="string">'chart'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">               extra_context=None)</span>:</span></span><br><span class="line">        config = conf.CURRENT_CONFIG</span><br><span class="line">        echarts_env = EchartsEnvironment(</span><br><span class="line">            pyecharts_config=config,</span><br><span class="line">            loader=FileSystemLoader(</span><br><span class="line">                [config.echarts_template_dir, conf.DEFAULT_TEMPLATE_DIR])</span><br><span class="line">        )</span><br><span class="line">        echarts_env.render_chart(</span><br><span class="line">            chart=self,</span><br><span class="line">            object_name=object_name,</span><br><span class="line">            path=path,</span><br><span class="line">            template_name=template_name,</span><br><span class="line">            extra_context=extra_context</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>多次渲染图表可以使用以下的代码，变得更为简洁，明朗。</p><p><em>代码 6</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Bar, Line</span><br><span class="line"><span class="keyword">from</span> pyecharts.conf <span class="keyword">import</span> PyEchartsConfig</span><br><span class="line"><span class="keyword">from</span> pyecharts.engine <span class="keyword">import</span> EchartsEnvironment</span><br><span class="line"><span class="keyword">from</span> pyecharts.utils <span class="keyword">import</span> write_utf8_html_file</span><br><span class="line"></span><br><span class="line">bar = Bar(<span class="string">"直方图示例"</span>)</span><br><span class="line">bar.add()</span><br><span class="line"></span><br><span class="line">line = Line(<span class="string">"测试图表"</span>)</span><br><span class="line">line.add()</span><br><span class="line"></span><br><span class="line">config = PyEchartsConfig()</span><br><span class="line">env = EchartsEnvironment(pyecharts_config=config)</span><br><span class="line"></span><br><span class="line">env.render_chart_to_file(bar, path=<span class="string">'bar.html'</span>)</span><br><span class="line">env.render_chart_to_file(line, path=<span class="string">'line.html'</span>)</span><br></pre></td></tr></table></figure><p>这种方案最大的优点，<strong>将 <code>render</code> 渲染这个操作变成了是引擎对象提供的方法</strong>，这一点符合面向对象的实际情形，也和 jinja2 ，django 等模板系统保持一致，而原来的 <code>chart.render</code> 就变成了一个 shortcut 方法，继续可以使用。</p><h2 id="与-Notebook-渲染的整合"><a href="#与-Notebook-渲染的整合" class="headerlink" title="与 Notebook 渲染的整合"></a>与 Notebook 渲染的整合</h2><p>pyecharts 的 issue <a href="https://github.com/pyecharts/pyecharts/issues/412" target="_blank" rel="noopener">#412</a> 也提出了关于 Notebook 使用场景下，引擎对象对此创建的问题，和其他一些问题。</p><p>主要解决方案如下：</p><p>第一步，整合模板，将所有的模板代码使用 <em>notebook.html</em> 存储，至于其中一些代码片段，借助已经实现的模板函数，将一些数据逻辑处理移到模板函数内执行，这样就能和本地渲染共用一些代码。</p><p>第二步，减少模板文件的 context 字典，将图表变量（chart 或 page）使用固定参数，其他使用 <code>**kwargs</code> 方式传入。例外的是 require_config ，该内部实现相对比较复杂，暂时没有进行改动，只是传入形式由：<code>**require_config</code> 改为更加明确的 <code>config_items=config_items,libraries=libraries</code> 。</p><p>为了提供方面，engine 提供了一个创建基本引擎对象的方法，纯 Python 和 notebook 两种场景下均可使用。</p><p><em>代码 7</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_default_environment</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Create environment object with pyecharts default single PyEchartsConfig.</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    config = conf.CURRENT_CONFIG</span><br><span class="line">    echarts_env = EchartsEnvironment(</span><br><span class="line">        pyecharts_config=config,</span><br><span class="line">        loader=FileSystemLoader(</span><br><span class="line">            [config.echarts_template_dir, conf.DEFAULT_TEMPLATE_DIR])</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> echarts_env</span><br></pre></td></tr></table></figure><p>针对上述，继续使用 <code>create_default_environment</code> 优化为以下的代码：</p><p><em>代码 8</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Bar, Line</span><br><span class="line"><span class="keyword">from</span> pyecharts.engine <span class="keyword">import</span> create_default_environment</span><br><span class="line"></span><br><span class="line">bar = Bar(<span class="string">"直方图示例"</span>)</span><br><span class="line">bar.add()</span><br><span class="line"></span><br><span class="line">line = Line(<span class="string">"测试图表"</span>)</span><br><span class="line">line.add()</span><br><span class="line"></span><br><span class="line">env = create_default_environment()</span><br><span class="line"></span><br><span class="line">env.render_chart_to_file(bar, path=<span class="string">'bar.html'</span>)</span><br><span class="line">env.render_chart_to_file(line, path=<span class="string">'line.html'</span>)</span><br></pre></td></tr></table></figure><p>改进过程：代码1/ 代码2 -&gt; 代码6 -&gt; 代码8</p><h2 id="总体架构"><a href="#总体架构" class="headerlink" title="总体架构"></a>总体架构</h2><p><img src="/images/render_strutures.jpg" alt="render-structure"></p><p>备注：</p><ul><li>绿色表示 <em>纯 Python</em> 的调用路径；蓝色表示 <em>Jupyter Notekook</em> 的调用路径。</li></ul><p>经过整合后，</p><p>第一，无论是 <em>纯 Python</em> 和 <em>Jupyter Notekook</em> 两个使用场景在底层均可使用相同的模板代码。</p><p>第二，这个模板代码由两部分组成。</p><p>1) 代码小片段使用 Python 代码表示，使用 <code>string.formmat</code> 函数格式化和渲染。比如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LINK_SCRIPT_FORMATTER = <span class="string">'&lt;script type="text/javascript" src="&#123;&#125;"&gt;&lt;/script&gt;'</span></span><br><span class="line">EMBED_SCRIPT_FORMATTER = <span class="string">'&lt;script type="text/javascript"&gt;\n&#123;&#125;\n&lt;/script&gt;'</span></span><br><span class="line">CHART_DIV_FORMATTER = <span class="string">'&lt;div id="&#123;chart_id&#125;" style="width:&#123;width&#125;;height:&#123;height&#125;;"&gt;&lt;/div&gt;'</span>  <span class="comment"># flake8: noqa</span></span><br><span class="line">CHART_CONFIG_FORMATTER = <span class="string">"""</span></span><br><span class="line"><span class="string">var myChart_&#123;chart_id&#125; = echarts.init(document.getElementById('&#123;chart_id&#125;', null, &#123;&#123;renderer: '&#123;renderer&#125;'&#125;&#125;));</span></span><br><span class="line"><span class="string">var option_&#123;chart_id&#125; = &#123;options&#125;;</span></span><br><span class="line"><span class="string">myChart_&#123;chart_id&#125;.setOption(option_&#123;chart_id&#125;);</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>上述代码由模板函数调用，并组成完整可用的 html 页面，</p><p>2) 其他完整的页面，使用 html 页面存储代码，支持用户自定义，使用 <code>jinja2.Environment</code> 渲染和传入数据。</p><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><h3 id="面向开发者"><a href="#面向开发者" class="headerlink" title="面向开发者"></a>面向开发者</h3><ul><li>整合模板存储，html 文件只保留完整可用的模板代码，小片段代码全部使用 Python 代码实现，参见 <code>engine</code> 模块</li><li>移除 <code>engine.render</code> 和 <code>engine.render_notebook</code>  方法</li><li>Notebook 相关测试案例移到新模块</li></ul><h3 id="面向使用者"><a href="#面向使用者" class="headerlink" title="面向使用者"></a>面向使用者</h3><ul><li>引擎类增加快捷的渲染方法 <code>render_chart_to_file</code></li><li>增加创建默认引擎类方法 <code>pyecharts.engine.create_default_environment</code></li><li>重构渲染内部实现，改善效率</li><li>修正图表 width/height 在 Noteboo 渲染的 bug</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果多次渲染图表，应当使用更为底层的 <code>render_chart</code> 方法， 这是需要坚持的一点。使用 <code>chart.render</code> 方式依旧无法解决多次创建引擎对象的问题，关于这一点之前已有多次讨论。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文已收录于 &lt;a href=&quot;/pyecharts-project/&quot;&gt;《pyecharts 开发专辑》&lt;/a&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文所述的基于特性 v0.3.3 版本，预计于 v0.3.4 / v0.4.0 加入。&lt;/p&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://kinegratii.github.io/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="数据可视化" scheme="http://kinegratii.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>django-echarts v0.3 系列发布日志</title>
    <link href="http://kinegratii.github.io/2018/02/25/django-echarts-030-release-note/"/>
    <id>http://kinegratii.github.io/2018/02/25/django-echarts-030-release-note/</id>
    <published>2018-02-25T10:47:04.000Z</published>
    <updated>2018-05-01T13:50:30.451Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文已收录于 <a href="/pyecharts-project/">《pyecharts 开发专辑》</a> 。</p></blockquote><a id="more"></a><h1 id="v0-3-2-发布日志"><a href="#v0-3-2-发布日志" class="headerlink" title="v0.3.2 发布日志"></a>v0.3.2 发布日志</h1><p>django-echarts v0.3.2 于 2018 年 3 月 13 日正式发布。版本日志为：</p><ul><li>移除 Django 的显示依赖</li><li>移除对 <code>numpy.Array</code> 的默认json编码</li></ul><h1 id="v0-3-1-发布日志"><a href="#v0-3-1-发布日志" class="headerlink" title="v0.3.1 发布日志"></a>v0.3.1 发布日志</h1><p>django-echarts v0.3.1 于 2018 年 3 月 8 日正式发布。版本日志为：</p><ul><li>恢复对 Django 1.11 LTS 的支持</li><li>改善 fetch 模块调用方式，<code>ifetch_multiple</code> 函数的关键字参数不再需要重复指定默认值</li><li><code>fetch</code> 模块函数支持自定义 getter 参数</li><li>ECharts 默认版本更新至v4.0.4</li><li>支持 ECharts 4.0 SVG渲染器的配置</li></ul><h2 id="1-fetch-模块改进"><a href="#1-fetch-模块改进" class="headerlink" title="1 fetch 模块改进"></a>1 fetch 模块改进</h2><p>v0.3.1 基于 <a href="https://www.python.org/dev/peps/pep-3102/" target="_blank" rel="noopener">PEP 3102</a> 调整了 <code>fetch</code> 模块所有函数的定义形式。由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ifetch_multiple</span><span class="params">(iterable, defaults, getter, *keys)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>更改为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ifetch_multiple</span><span class="params">(iterable, *keys, defaults=None, getter=None)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>其中 <code>default</code> / <code>defaults</code> / <code>getter</code> 三个可选参数均要求以关键字形式传入。</p><p>之前无论是否使用自己的  defaults 均必须传入以符合位置参数的要求，现在无需这种做法。</p><p>之前：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifetch_multiple(DICT_LIST_DATA, &#123;&#125;, <span class="keyword">None</span>, <span class="string">'name'</span>, <span class="string">'age'</span>)</span><br></pre></td></tr></table></figure><p>现在：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifetch_multiple(DICT_LIST_DATA, <span class="string">'name'</span>, <span class="string">'age'</span>)</span><br></pre></td></tr></table></figure></p><h2 id="2-增加自定义-getter-回调函数"><a href="#2-增加自定义-getter-回调函数" class="headerlink" title="2 增加自定义 getter 回调函数"></a>2 增加自定义 getter 回调函数</h2><p>一个简单的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MockItem</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y, z)</span>:</span></span><br><span class="line">        self._data = &#123;<span class="string">'x'</span>: x, <span class="string">'y'</span>: y, <span class="string">'z'</span>: z&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._data.get(key)</span><br><span class="line"></span><br><span class="line">my_getter = <span class="keyword">lambda</span> item, key: item.get(key)</span><br><span class="line">data_list = [MockItem(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), MockItem(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>), MockItem(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)]</span><br><span class="line">xs, ys, zs = fetch(data_list, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>, getter=my_getter)</span><br></pre></td></tr></table></figure><p>getter 必须是一个回调函数，函数符合以下的要求：</p><ul><li>必须含有名称为 <code>item</code> 和 <code>key</code> 的两个参数</li><li>item 表示单个实体类对象；key 表示索引、属性、键值名称</li></ul><h2 id="3-支持-ECharts-SVG-配置"><a href="#3-支持-ECharts-SVG-配置" class="headerlink" title="3 支持 ECharts SVG 配置"></a>3 支持 ECharts SVG 配置</h2><p>django-echarts 新增了一个名为 renderer 的项目配置项，可选值包括 <code>&#39;canvas&#39;</code> 和 <code>&#39;svg&#39;</code> 。</p><p>django-echarts 按照以下顺序选择渲染方式：</p><ul><li>图表属性 <code>Chart.renderer</code></li><li>项目配置的 <code>DJANGO_ECHARTS[‘renderer’]</code> 的设置</li></ul><p>django-echarts 默认使用 canvas 渲染器，可以通过以下方式更改为 svg 渲染。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DJANGO_ECHARTS = &#123;</span><br><span class="line">    <span class="string">'echarts_version'</span>:<span class="string">'4.0.4'</span>,</span><br><span class="line">    <span class="string">'renderer'</span>: <span class="string">'svg'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意的是只有 echarts_version 大于 4 时，才可以使用 svg 渲染。django-echarts 并不会强制检查这一点，请使用者自行确认。</p><h1 id="v0-3-0-发布日志"><a href="#v0-3-0-发布日志" class="headerlink" title="v0.3.0 发布日志"></a>v0.3.0 发布日志</h1><p>django-echarts v0.3.0 正式发布。该版本将 <strong>仅支持</strong> Python3.5+ 以及 Django2.0+ 的环境，同时该增加了若干个功能特性：</p><ul><li>移除对 Python2 的支持</li><li>新增计数模块 <code>datasets.section_counter</code></li><li>部分函数增加 Key-Only Arguments ( <a href="https://www.python.org/dev/peps/pep-3102/" target="_blank" rel="noopener">PEP 3102</a> ) 限定</li><li>下载命令增加 <code>--fake</code> 选项，支持预览调试</li><li>整合单元测试</li><li>发布数据构建文档</li></ul><!-- more --><h2 id="1-Python3迁移"><a href="#1-Python3迁移" class="headerlink" title="1 Python3迁移"></a>1 Python3迁移</h2><p>django-echarts 使用了更为激进的迁移策略，v0.3之后将仅支持  Python3.5+ 以及 Django2.0+ 的运行环境，不再支持 Python2 ，django-echarts v0.3 将在 Python2 环境中出现语法层面的错误。</p><p>具体来说就是  <a href="https://www.python.org/dev/peps/pep-3102/" target="_blank" rel="noopener">PEP 3102</a> 的应用，在3.X中新增了强制关键字参数传递（Keyword-Only Arguments）中，定义的形式为使用 * 单独占用一个参数，表示之后的参数必须以关键字方式传入参数，否则将引发TypeError异常。</p><p>例子：</p><p>django_echarts.plugins.host.HostStore</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HostStore</span><span class="params">(object)</span>:</span></span><br><span class="line">    HOST_DICT = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *, context=None, default_host=None)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>django_echarts.plugins.store.SettingsStore</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SettingsStore</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *, echarts_settings=None, extra_settings=None, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>是否使用 Keyword-Only Arguments ，自己根据实际情况总结了一些应用场景。</p><ul><li>函数有两个以上的可选参数（提供了默认参数）</li><li>这些参数的功能意义是平等的，通常可任意调换位置</li></ul><p>比如 django_echarts.datasets.section_counter.BSectionIndex 类的 <code>__init__</code> 就没有使用这个特性，因为 [lower, upper] 更符合实际表达形式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSectionIndex</span><span class="params">(BIndex)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, lower=None, upper=None)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="2-计数模块-section-counter"><a href="#2-计数模块-section-counter" class="headerlink" title="2 计数模块 section_counter"></a>2 计数模块 section_counter</h2><p>该模块针对常见的数据计数业务场景进行的封装，该模块基于内置 <code>collections.Counter</code> 模块，并基于此进行了一些扩展。</p><p>BSectionCounter 库用于计算符合一系列条件的数目计数类。</p><p>先看一个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">data_list = list(df[<span class="string">'stars'</span>])</span><br><span class="line">labels = [<span class="string">'00~00'</span>, <span class="string">'01~10'</span>, <span class="string">'11~50'</span>, <span class="string">'51~100'</span>, <span class="string">'101~500'</span>, <span class="string">'501~1000'</span>, <span class="string">'&gt;1000'</span>]</span><br><span class="line">sizes = []</span><br><span class="line">sizes.append(len([pp <span class="keyword">for</span> pp <span class="keyword">in</span> data_list <span class="keyword">if</span> pp == <span class="number">0</span>]))</span><br><span class="line">sizes.append(len([pp <span class="keyword">for</span> pp <span class="keyword">in</span> data_list <span class="keyword">if</span> pp &gt;= <span class="number">1</span> <span class="keyword">and</span> pp &lt;= <span class="number">10</span>]))</span><br><span class="line">sizes.append(len([pp <span class="keyword">for</span> pp <span class="keyword">in</span> data_list <span class="keyword">if</span> pp &gt;= <span class="number">11</span> <span class="keyword">and</span> pp &lt;= <span class="number">50</span>]))</span><br><span class="line">sizes.append(len([pp <span class="keyword">for</span> pp <span class="keyword">in</span> data_list <span class="keyword">if</span> pp &gt;= <span class="number">51</span> <span class="keyword">and</span> pp &lt;= <span class="number">100</span>]))</span><br><span class="line">sizes.append(len([pp <span class="keyword">for</span> pp <span class="keyword">in</span> data_list <span class="keyword">if</span> pp &gt;= <span class="number">101</span> <span class="keyword">and</span> pp &lt;= <span class="number">500</span>]))</span><br><span class="line">sizes.append(len([pp <span class="keyword">for</span> pp <span class="keyword">in</span> data_list <span class="keyword">if</span> pp &gt;= <span class="number">501</span> <span class="keyword">and</span> pp &lt;= <span class="number">1000</span>]))</span><br><span class="line">sizes.append(len([pp <span class="keyword">for</span> pp <span class="keyword">in</span> data_list <span class="keyword">if</span> pp &gt;= <span class="number">1001</span>]))</span><br><span class="line">stargazer_bar = Bar(<span class="string">"stars"</span>, <span class="string">"stars hist graph of users"</span>, width=CHART_WIDTH)</span><br><span class="line">stargazer_bar.add(<span class="string">""</span>, labels, sizes, is_label_show=<span class="keyword">True</span>, mark_line=[<span class="string">"average"</span>])</span><br></pre></td></tr></table></figure><p>使用 BSelectionCounter 后，简化为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">data_list = list(df[<span class="string">'stars'</span>])</span><br><span class="line">rc1 = BSectionCounter(</span><br><span class="line">    BValueIndex(<span class="number">0</span>),</span><br><span class="line">    BSectionIndex(<span class="number">1</span>, <span class="number">10</span>),</span><br><span class="line">    BSectionIndex(<span class="number">11</span>, <span class="number">50</span>),</span><br><span class="line">    BSectionIndex(<span class="number">51</span>, <span class="number">100</span>),</span><br><span class="line">    BSectionIndex(<span class="number">101</span>, <span class="number">500</span>),</span><br><span class="line">    BSectionIndex(<span class="number">501</span>, <span class="number">1000</span>),</span><br><span class="line">    BSectionIndex(<span class="number">1001</span>)</span><br><span class="line">)</span><br><span class="line">labels, sizes = rc1.feed_as_axises(data_list)</span><br><span class="line">stargazer_bar = Bar(<span class="string">"stars"</span>, <span class="string">"stars hist graph of users"</span>, width=CHART_WIDTH)</span><br><span class="line">stargazer_bar.add(<span class="string">""</span>, labels, sizes, is_label_show=<span class="keyword">True</span>, mark_line=[<span class="string">"average"</span>])</span><br></pre></td></tr></table></figure><h2 id="3-下载命令支持预览调试"><a href="#3-下载命令支持预览调试" class="headerlink" title="3 下载命令支持预览调试"></a>3 下载命令支持预览调试</h2><p>增加 <code>--fake</code> 后，命令将仅打印出对应文件的下载路径、引用路径、存储位置，而 <strong>不会进行任何实际的下载操作</strong> ，可用于预览调试。</p><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;python manage.py download_echarts_js echarts.min china --fake</span><br><span class="line">[Info] Download Meta for [echarts.min]</span><br><span class="line">        Remote Url: https://cdn.bootcss.com/echarts/3.7.0/echarts.min.js</span><br><span class="line">        Local  Url: /static/echarts/echarts.min.js</span><br><span class="line">        Local Path: E:\projects\django-echarts\example\static\echarts\echarts.min.js</span><br><span class="line">[Info] Download Meta for [china]</span><br><span class="line">        Remote Url: http://echarts.baidu.com/asset/map/js/china.js</span><br><span class="line">        Local  Url: /static/echarts/china.js</span><br><span class="line">        Local Path: E:\projects\django-echarts\example\static\echarts\china.js</span><br></pre></td></tr></table></figure><p>fake 命名灵感来自于 <a href="https://docs.djangoproject.com/en/2.0/ref/django-admin/#cmdoption-migrate-fake" target="_blank" rel="noopener">migrate命令</a> 。</p><h2 id="4-发布数据构建文档"><a href="#4-发布数据构建文档" class="headerlink" title="4 发布数据构建文档"></a>4 发布数据构建文档</h2><p>v0.3.0 开始，有关数据构建的文档将独立出来。一方面，从功能上来说，数据构建模块仅是数据创建和渲染过程中可能使用到的工具性代码，并不是核心功能。</p><p>另一方面，由于该模块的工具特性使其具有更为一般的通用性，因此在后续开发中，有考虑将其纳入 正在编写的 “pyecharts-contrib计划’’之中。</p><blockquote><p>pyecharts-contrib 计划旨在于构建通用、简单的脚手架模板，和提供解决数据可视化领域中一些常见问题的工具集合。使用者可以迅速地基于 contrib 开始新的项目。pyecharts-contrib 将追求遵循<a href="https://docs.python.org/3/tutorial/stdlib.html#tut-batteries-included" target="_blank" rel="noopener">“batteries included” philosophy</a> 。pyecharts-contrib 命名的灵感来自于 <code>django.contrib</code> 。</p><p>目前，该计划正在紧张有序的进行中。</p></blockquote><h2 id="5-其他功能改进"><a href="#5-其他功能改进" class="headerlink" title="5 其他功能改进"></a>5 其他功能改进</h2><p>其他部分功能改进。</p><ul><li><code>FieldValuesQuerySet.fetch_values</code> 类和方法重名为 <code>AxisValuesQuerySet.as_axis_values</code> 更加符合实际意义</li><li>整合测试样例</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文已收录于 &lt;a href=&quot;/pyecharts-project/&quot;&gt;《pyecharts 开发专辑》&lt;/a&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://kinegratii.github.io/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="数据可视化" scheme="http://kinegratii.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="项目" scheme="http://kinegratii.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>你好，2018！</title>
    <link href="http://kinegratii.github.io/2017/12/30/happy-2018/"/>
    <id>http://kinegratii.github.io/2017/12/30/happy-2018/</id>
    <published>2017-12-30T14:17:39.000Z</published>
    <updated>2018-05-01T13:50:30.451Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> ____     ___    _    ___</span><br><span class="line">|___ \   / _ \  / |  ( _ )</span><br><span class="line">  __) | | | | | | |  / _ \</span><br><span class="line"> / __/  | |_| | | | | (_) |</span><br><span class="line">|_____|  \___/  |_|  \___/</span><br></pre></td></tr></table></figure><blockquote><p>echo “2018” | figlet</p></blockquote><a id="more"></a><h2 id="2017年技术大事记"><a href="#2017年技术大事记" class="headerlink" title="2017年技术大事记"></a>2017年技术大事记</h2><p><em>按时间先后排序</em></p><ul><li>主持并完成公司 NMS v2.0 项目的重构和试运行工作</li><li>维护 HydrantDeviceSystem 项目</li><li>完成个人项目《水资源费征收工作平台》，发布v1.2.X系列版本</li><li>阅读书籍《构建之法》</li><li>加入 <a href="https://github.com/pyecharts" target="_blank" rel="noopener">pyecharts开源项目团队</a></li><li>撰写26篇博客文章</li></ul><h2 id="2017年博客总结"><a href="#2017年博客总结" class="headerlink" title="2017年博客总结"></a>2017年博客总结</h2><p>2017年一共写了 26 篇文章，是博客重建后的完整的第一年，也是写了比较多的文章，目前总计达到38篇文章。</p><table><thead><tr><th>分类</th><th>数目</th><th>占比</th></tr></thead><tbody><tr><td>2017</td><td>26</td><td>68.42%</td></tr><tr><td>2016</td><td>9</td><td>23.69%</td></tr><tr><td>2015</td><td>3</td><td>7.89%</td></tr></tbody></table><p>15和16年的文章只是从其他地方迁移过来的，其中有所取舍，因此数量上显得就比较少了。</p><p>按照分类统计如下表：</p><table><thead><tr><th>分类</th><th>数目</th><th>占比</th></tr></thead><tbody><tr><td>编程</td><td>24</td><td>63.15%</td></tr><tr><td>技术研究</td><td>10</td><td>26.32%</td></tr><tr><td>生活</td><td>4</td><td>10.53%</td></tr></tbody></table><p>使用 <a href="http://echarts.baidu.com/" target="_blank" rel="noopener">Echarts</a> 渲染图表如下：</p><p><img src="/images/blog-catalog-statistics-2017.png" alt="Blog-Catalog"></p><p>目前还是偏重于语言技术层次，系统设计和原理性的文章还是偏少。希望自己2018年在这方面需要一定的加强。</p><h2 id="2018年期望与规划"><a href="#2018年期望与规划" class="headerlink" title="2018年期望与规划"></a>2018年期望与规划</h2><ul><li>本职工作</li><li>pyecharts项目 <a href="https://github.com/pyecharts/pyecharts" target="_blank" rel="noopener">https://github.com/pyecharts/pyecharts</a></li><li>django-echarts项目 <a href="https://github.com/kinegratii/django-echarts" target="_blank" rel="noopener">https://github.com/kinegratii/django-echarts</a></li><li>系统架构设计师资格考试</li><li>技术书籍阅读</li><li>继续撰写博客文章</li><li>[可选]BWS v2.0 重构工作</li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="系统架构设计师"><a href="#系统架构设计师" class="headerlink" title="系统架构设计师"></a>系统架构设计师</h3><p>系统架构设计师是一个最终确认和评估系统需求，给出开发规范，搭建系统实现的核心构架，并澄清技术细节、扫清主要难点的技术人员。 系统架构设计师考试合格人员能够根据系统需求规格说明书，结合应用领域和技术发展的实际情况，考虑有关约束条件，设计正确、合理的软件架构，确保系统架构具有良好的特性；能够对项目的系统架构进行描述、分析、设计与评估；能够按照相关标准编写相应的设计文档；能够与系统分析师、项目管理师相互协作、配合工作；具有高级工程师的实际工作能力和业务水平。</p><p>考试要求</p><ul><li>（1）掌握计算机硬软件与网络基础知识；</li><li>（2）熟悉信息系统开发过程；</li><li>（3）理解信息系统开发标准、常用信息技术标准；</li><li>（4）熟悉主流的中间件和应用服务器平台；</li><li>（5）掌握软件系统建模、系统架构设计技术；</li><li>（6）熟练掌握信息安全技术、安全策略、安全管理知识；</li><li>（7）了解信息化、信息技术有关法律、法规的基础知识；</li><li>（8）了解用户的行业特点，并根据行业特点架构合适的系统设计；</li><li>（9）掌握应用数学基础知识；</li><li>（10）熟练阅读和正确理解相关领域的英文文献。</li></ul><p>考试科目设置</p><ul><li>（1）信息系统综合知识，考试时间为150分钟，笔试，选择题；</li><li>（2）系统架构设计案例分析，考试时间为90分钟，笔试，问答题；</li><li>（3）系统架构设计论文，考试时间为120分钟，笔试，论文题。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; ____     ___    _    ___&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|___ \   / _ \  / |  ( _ )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  __) | | | | | | |  / _ \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; / __/  | |_| | | | | (_) |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|_____|  \___/  |_|  \___/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;echo “2018” | figlet&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="生活" scheme="http://kinegratii.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="里程碑" scheme="http://kinegratii.github.io/tags/%E9%87%8C%E7%A8%8B%E7%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>pyecharts 开发笔记</title>
    <link href="http://kinegratii.github.io/2017/11/23/pyecharts-development-note/"/>
    <id>http://kinegratii.github.io/2017/11/23/pyecharts-development-note/</id>
    <published>2017-11-23T12:53:09.000Z</published>
    <updated>2018-05-01T13:50:30.451Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文已收录于 <a href="/pyecharts-project/">《pyecharts 开发专辑》</a> 。</p></blockquote><p>本文记录了在 pyecharts 开发过程中的一些想法思路和具体问题分析解决的方案。写作本文的目的主要有两个：一是工作总结，每完成一项工作需要静下心来总结工作得失，这就是一种进步和成长；二是技术分享，对于同一个知识和技术，每个人的理解和思考都是不同的，博客提供了一个很好的分享平台。</p><p>本文基于 <a href="https://github.com/chenjiandongx/pyecharts/pull/240" target="_blank" rel="noopener">PR 自定义模板</a> 整理。</p><a id="more"></a><h2 id="总体思想"><a href="#总体思想" class="headerlink" title="总体思想"></a>总体思想</h2><h3 id="最初的想法"><a href="#最初的想法" class="headerlink" title="最初的想法"></a>最初的想法</h3><p>大约七八月份的时候就尝试了写了 <a href="https://github.com/kinegratii/django-echarts" target="_blank" rel="noopener">django-echarts</a> 这个项目，发现一些细节性问题处理起来不太方便，更为主要的是一个整体的架构没有完整的建立起来。直到十月份的时候才腾下时间思考这个问题。</p><p>因为本人是主要从事 Django 开发的，因此代码风格和思想难免受到 Django 的影响，比如基于类的代码、Mixin模式，还有一些变量命名等等。</p><h3 id="从-OPP-到-OOP"><a href="#从-OPP-到-OOP" class="headerlink" title="从 OPP 到 OOP"></a>从 OPP 到 OOP</h3><p>面向过程和面向对象是两种不同的设计和编码方法。在我看来，虽然二者互有优劣，但并不是排他的。在前期开发过程中，使用面向过程的方法更有助于我们描述功能，把场景活动翻译成程序语言，因为我们自己就是一个过程性的思维，“先做什么，再做什么”。</p><p>随着开发不断推进，我们逐渐了解其内在的联系，抽象出对象、动作、接口等概念，进而能够应用继承、多态等面向对象的思想。</p><p>Python 之所以称之为万能胶水，我觉得一个原因是 Python 在面向过程和面向对象之间切换自由。描述同一语言 Python 不像 Java 那些，一上来就各种类，各种继承。</p><h3 id="规则、公开、API"><a href="#规则、公开、API" class="headerlink" title="规则、公开、API"></a>规则、公开、API</h3><p>这个主要是和 Python 语言特点有关，Python 是比较灵活的。比如 Python 对于属性权限限制是“约定俗称”的。下面的 <code>js_dependencies</code> 属性应当被看成是私有的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chart</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._js_dependencies = &#123;&#125;</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">js_dependencies</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._js_dependencies</span><br></pre></td></tr></table></figure><p>但是，你也可以直接使用 <code>chart._js_dependencies</code> 来访问，只不过：</p><ul><li>IDE 可能会发出警告（warnings）</li><li>变更无法预料，从开发者的角度，无需为此语句有效性提供任何保障</li></ul><p>使用 <code>@property</code> 语法公开了该类的一个访问接口。</p><p>当然，何时公开、怎么公开又是另外一个问题了。</p><h3 id="持续开发与废弃策略"><a href="#持续开发与废弃策略" class="headerlink" title="持续开发与废弃策略"></a>持续开发与废弃策略</h3><p>这里的持续性开发指的的公共API的稳定性，更为确切的说是废弃策略。随着项目的不断推进，新代码不断加入，旧代码不断淘汰。但由于开源项目的公开性和考虑其稳定性，无用的代码并总是立即被删除，而是经过一段时间后再删除，在这方面，个人 Django 项目做的比较好，将旧有代码按照淘汰进程分几个等级(<a href="https://docs.djangoproject.com/en/1.11/internals/release-process/#deprecation-policy" target="_blank" rel="noopener">链接</a>) ，我自己在此基础上增加了一个等级：Not Recommend ，通常用于重大变更，涉及到核心代码</p><ul><li>不再推荐使用(Not Recommend)：仅在更新日志和文档中表明</li><li>废弃(Deprecated)：使用 <code>warnings</code> 模块表明</li><li>移除(Removed)：删除相关代码</li></ul><h2 id="功能设计与实现"><a href="#功能设计与实现" class="headerlink" title="功能设计与实现"></a>功能设计与实现</h2><h3 id="html转义与Python实现"><a href="#html转义与Python实现" class="headerlink" title="html转义与Python实现"></a>html转义与Python实现</h3><p>转义字符串（Escape Sequence）也称字符实体(Character Entity)。在HTML中，定义转义字符串的原因有两个：第一个原因是像“&lt;”和“&gt;”这类符号已经用来表示HTML标签，因此就不能直接当作文本中的符号来使用。为了在HTML文档中使用这些符号，就需要定义它的转义字符串。当解释程序遇到这类字符串时就把它解释为真实的字符。在输入转义字符串时，要严格遵守字母大小写的规则。第二个原因是，有些字符在ASCII字符集中没有定义，因此需要使用转义字符串来表示。</p><p>字符串安全</p><p>如果启用了手动转义，按需转义变量就是 <strong>你的</strong> 责任。要转义什么？如果你有 一个 <em>可能</em> 包含 <code>&gt;</code> 、 <code>&lt;</code> 、 <code>&amp;</code> 或 <code>&quot;</code> 字符的变量，你必须转义 它，除非变量中的 HTML 有可信的良好格式。转义通过用管道传递到过滤器 <code>|e</code> 来实现: <code></code> 。</p><p>当启用了自动转移，默认会转移一切，除非值被显式地标记为安全的。可以在应用中 标记，也可以在模板中使用 |safe 过滤器标记。这种方法的主要问题是 Python 本 身没有被污染的值的概念，所以一个值是否安全的信息会丢失。如果这个信息丢失， 会继续转义，你最后会得到一个转义了两次的内容。</p><p>显示地标记值安全的有两种方式：</p><ul><li>在模板中使用 <code>safe</code> 过滤器</li><li>传递给模板的值用 <code>Markup</code> 类包裹下</li></ul><p>根据 <a href="http://jinja.pocoo.org/docs/2.10/api/#jinja2.Markup" target="_blank" rel="noopener">官方文档</a> ，<code>Markup</code> 可以无需转义即可标记一个字符串为安全的。这是通过实现 <code>__html__</code> 接口来实现的。<code>Markup</code> 是 <code>unicode</code> 的直接子类，拥有其众多的方法和属性。核心代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Markup</span><span class="params">(text_type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__html__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br></pre></td></tr></table></figure><p>其使用方式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span>&gt;&gt; Markup("Hello &lt;em&gt;World&lt;/em&gt;!")</span><br><span class="line">Markup(u'Hello &lt;em&gt;World&lt;/em&gt;!')</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; class Foo(object):</span><br><span class="line">...  def __html__(self):</span><br><span class="line">...   return '&lt;a href="#"&gt;foo&lt;/a&gt;'</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; Markup(Foo())</span><br><span class="line">Markup(u'&lt;a href="#"&gt;foo&lt;/a&gt;')</span><br></pre></td></tr></table></figure><blockquote><p>Jinja2 的 <a href="http://docs.jinkan.org/docs/jinja2/api.html#jinja2.Markup" target="_blank" rel="noopener"><code>Markup</code></a> 类至少与 Pylons 和 Genshi 兼容。预计不久更多模板 引擎和框架会采用 <code>__html__</code> 的概念。</p></blockquote><p>Django 目前也支持 <code>__html__</code> 接口协议。其数据实体定义在 <code>django.utils.safestring.SafeData</code> 。源代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SafeData</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__html__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns the html representation of a string for interoperability.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        This allows other template engines to understand Django's SafeData.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br></pre></td></tr></table></figure><h3 id="js-内嵌引入的正则替换"><a href="#js-内嵌引入的正则替换" class="headerlink" title="js 内嵌引入的正则替换"></a>js 内嵌引入的正则替换</h3><p>主要指的是 <code>pyecharts.utils.freeze_js</code> 的原理是先渲染生成 html 文件字符串，再使用正则替换，这在之前是没有问题，引入自定义模板后，模板文件也有可能引用其他文件（如 bootstrap.min.js），这样的话，碰到该行直接出现错误。</p><p>改进的办法是在渲染的过程就根据配置决定是否替换，因此该函数也可移除。</p><h3 id="和-Flask-整合问题"><a href="#和-Flask-整合问题" class="headerlink" title="和 Flask 整合问题"></a>和 Flask 整合问题</h3><blockquote><p>此种方式是整合过程中产生一个代码版本，后来发现会破坏 Flask 原有的功能，因此改写为下一节的代码版本。但此种整合方式也是思考的一个过程，因此没有将此删除。</p></blockquote><p>这是上周末刚刚完成的内容，解决在 Flask 框架中使用模板函数的问题。主要代码摘抄如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> jinjia2 <span class="keyword">import</span> Environment <span class="keyword">as</span> BaseEnvironment</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Environment</span><span class="params">(BaseEnvironment)</span>:</span></span><br><span class="line">    <span class="string">"""Works like a regular Jinja2 environment but has some additional</span></span><br><span class="line"><span class="string">    knowledge of how Flask's blueprint works so that it can prepend the</span></span><br><span class="line"><span class="string">    name of the blueprint to referenced templates if necessary.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app, **options)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'loader'</span> <span class="keyword">not</span> <span class="keyword">in</span> options:</span><br><span class="line">            options[<span class="string">'loader'</span>] = app.create_global_jinja_loader()</span><br><span class="line">        BaseEnvironment.__init__(self, **options)</span><br><span class="line">        self.app = app</span><br></pre></td></tr></table></figure><p>pyecharts 模板引擎</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> jinjia2 <span class="keyword">import</span> Environment</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EchartsEnvironment</span><span class="params">(Environment)</span>:</span></span><br><span class="line">    <span class="string">"""Built-in jinja2 template engine for pyecharts</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, pyecharts_config=None, *args, **kwargs)</span>:</span></span><br><span class="line">        self._pyecharts_config = pyecharts_config <span class="keyword">or</span> PyEchartsConfig()</span><br><span class="line">        loader = kwargs.pop(<span class="string">'loader'</span>, <span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">if</span> loader <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            loader = FileSystemLoader(</span><br><span class="line">                self._pyecharts_config.echarts_template_dir)</span><br><span class="line">        super(EchartsEnvironment, self).__init__(</span><br><span class="line">            keep_trailing_newline=<span class="keyword">True</span>,</span><br><span class="line">            trim_blocks=<span class="keyword">True</span>,</span><br><span class="line">            lstrip_blocks=<span class="keyword">True</span>,</span><br><span class="line">            loader=loader,</span><br><span class="line">            *args,</span><br><span class="line">            **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Add PyEChartsConfig</span></span><br><span class="line">        self.globals.update(&#123;</span><br><span class="line">            <span class="string">'echarts_js_dependencies'</span>: echarts_js_dependencies,</span><br><span class="line">            <span class="string">'echarts_js_dependencies_embed'</span>: echarts_js_dependencies_embed,</span><br><span class="line">            <span class="string">'echarts_container'</span>: echarts_container,</span><br><span class="line">            <span class="string">'echarts_js_content'</span>: echarts_js_content,</span><br><span class="line">            <span class="string">'echarts_js_content_wrap'</span>: echarts_js_content_wrap</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>代码解析要点如下：</p><ul><li><code>Flask.Environment</code> 新增了两点扩展：<ul><li>增加了一个必要的 app 成员变量，这是一个 Flask 实例</li><li>同时提供了默认的 loader 。</li></ul></li><li><code>pyecharts.engine.EchartsEnvironment</code> 也有两点扩展：<ul><li>增加了一个可选 pyecharts_config 成员变量</li><li>同时提供了默认的 loader。</li></ul></li></ul><p>整合的目标是实现一个类，使得同时具有以上四个特点。</p><p>主要整合方式：</p><p>第一种：Mixin 方式。这种方式是实现最为简单，但是在此种情况下却无法使用，这是因为二者都重写了 <code>__init__</code> ，都涉及到对象的创建过程，不建议使用。</p><p>第二种是代码混合方式：让一个直接继承 <code>jinja2.Environment</code> ，将另外一个的代码搬入。因为 <code>Flask.Environment</code> 的代码比较少，继承 <code>EchartsEnvironment</code> 是更为优化的。</p><p>下面是使用第二种方式整合的最终代码及其使用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ----- Adapter ---------</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlaskEchartsEnvironment</span><span class="params">(EchartsEnvironment)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app, **kwargs)</span>:</span></span><br><span class="line">        EchartsEnvironment.__init__(self, **kwargs)</span><br><span class="line">        self.app = app</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---User Code ----</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFlask</span><span class="params">(Flask)</span>:</span></span><br><span class="line">    jinja_environment = FlaskEchartsEnvironment</span><br><span class="line">    jinja_options = &#123;<span class="string">'pyecharts_config'</span>: PyEchartsConfig(</span><br><span class="line">        jshost=<span class="string">'https://cdn.bootcss.com/echarts/3.7.2'</span>,</span><br><span class="line">        echarts_template_dir=<span class="string">'templates'</span></span><br><span class="line">    )&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = MyFlask(__name__)</span><br></pre></td></tr></table></figure><p>因为 EchartsEnvironment 显式传入了 loader 参数，抵消了 Environment 类 loader 的重写逻辑。</p><p>目前该代码放在 demo 内，没有整合为 pyecharts 一部分。</p><h3 id="web框架整合优化"><a href="#web框架整合优化" class="headerlink" title="web框架整合优化"></a>web框架整合优化</h3><p>上一节实现有个重大问题，表面上看会覆盖原有模板目录功能，导致必须现实设置 <code>echarts_template_dir</code> 。因此必须继承  <code>flask.templating.Environment</code> 以保全全部功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"><span class="keyword">from</span> flask.templating <span class="keyword">import</span> Environment</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> HeatMap</span><br><span class="line"><span class="keyword">from</span> pyecharts.engine <span class="keyword">import</span> PyEchartsConfigMixin, ECHAERTS_TEMPLATE_FUNCTIONS</span><br><span class="line"><span class="keyword">from</span> pyecharts.conf <span class="keyword">import</span> PyEchartsConfig</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlaskEchartsEnvironment</span><span class="params">(Environment, PyEchartsConfigMixin)</span>:</span></span><br><span class="line">    pyecharts_config = PyEchartsConfig(</span><br><span class="line">        jshost=<span class="string">'https://cdn.bootcss.com/echarts/3.7.2'</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        super(FlaskEchartsEnvironment, self).__init__(*args, **kwargs)</span><br><span class="line">        self.globals.update(ECHAERTS_TEMPLATE_FUNCTIONS)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFlask</span><span class="params">(Flask)</span>:</span></span><br><span class="line">    jinja_environment = FlaskEchartsEnvironment</span><br><span class="line"></span><br><span class="line">app = MyFlask(__name__)</span><br></pre></td></tr></table></figure><p>之后和标准的 Flask 项目一样使用。</p><h3 id="命名借鉴"><a href="#命名借鉴" class="headerlink" title="命名借鉴"></a>命名借鉴</h3><p>比如 <code>Page.from_charts</code> 借鉴了 <code>django.db.models.Manager.from_queryset</code> 。<br>又比如类 Mixin 模式变量方法的命名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">clas DemoMixin(object):</span><br><span class="line">    foo1 = <span class="keyword">None</span></span><br><span class="line">    foo2 = <span class="keyword">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_foo1</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.foo1</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_foo2</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.foo2</span><br></pre></td></tr></table></figure><h2 id="Python-2-3"><a href="#Python-2-3" class="headerlink" title="Python 2/3"></a>Python 2/3</h2><h3 id="json-dumps-输出结果"><a href="#json-dumps-输出结果" class="headerlink" title="json.dumps 输出结果"></a>json.dumps 输出结果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">c = &#123;<span class="string">'date'</span>:<span class="string">'2017-01-01'</span>, <span class="string">'a'</span>:<span class="string">'1'</span>&#125;</span><br><span class="line">data = json.dumps(c, indent=<span class="number">0</span>)</span><br><span class="line">print(len(data))</span><br><span class="line">print(<span class="string">'*'</span>.join(data))</span><br></pre></td></tr></table></figure><p>上述代码在 2 和 3 环境下运行结果是不同的，结果如下：</p><p>环境：Python 3.6.3 (v3.6.3:2c5fed8, Oct  3 2017, 18:11:49) [MSC v.1900 64 bit (AMD64)]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">34</span><br><span class="line">&#123;*</span><br><span class="line">*&quot;*d*a*t*e*&quot;*:* *&quot;*2*0*1*7*-*0*1*-*0*1*&quot;*,*</span><br><span class="line">*&quot;*a*&quot;*:* *&quot;*1*&quot;*</span><br><span class="line">*&#125;</span><br></pre></td></tr></table></figure><p>环境：2.7.14 (v2.7.14:84471935ed, Sep 16 2017, 20:25:58) [MSC v.1500 64 bit (AMD64)]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">35</span><br><span class="line">&#123;*</span><br><span class="line">*&quot;*d*a*t*e*&quot;*:* *&quot;*2*0*1*7*-*0*1*-*0*1*&quot;*,* *</span><br><span class="line">*&quot;*a*&quot;*:* *&quot;*1*&quot;*</span><br><span class="line">*&#125;</span><br></pre></td></tr></table></figure><p>简而言之，将字典转化为json字符串时，python2 在每一对键值分割符“,”增加了一个空格</p><p>下面是测试 <code>pyecharts.utils.json_dumps</code> 功能的测试代码（使用 nosetests 框架）。影响到的是最后测试的时候直接使用表达式结果作为 assert 语句的第一个参数，这是一个取巧的方法，因为目前没有引入 <code>six</code> 等兼容库，代码需要多写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date, datetime</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnknownTypeEncoder</span><span class="params">(json.JSONEncoder)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(obj, (datetime.datetime, datetime.date)):</span><br><span class="line">            <span class="keyword">return</span> obj.isoformat()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">return</span> obj.astype(float).tolist()</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">return</span> obj.astype(str).tolist()</span><br><span class="line">                <span class="keyword">except</span> Exception:</span><br><span class="line">                    <span class="keyword">return</span> json.JSONEncoder.default(self, obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_dumps</span><span class="params">(data, indent=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps(data, indent=indent, cls=UnknownTypeEncoder)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_json_encoder</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Test json encoder.</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    data = date(<span class="number">2017</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    eq_(json.dumps(&#123;<span class="string">'date'</span>: <span class="string">'2017-01-01'</span>, <span class="string">'a'</span>: <span class="string">'1'</span>&#125;, indent=<span class="number">0</span>), json_dumps(&#123;<span class="string">'date'</span>: data, <span class="string">'a'</span>: <span class="string">'1'</span>&#125;))</span><br><span class="line"></span><br><span class="line">    data2 = &#123;<span class="string">'np_list'</span>: np.array([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])&#125;</span><br><span class="line">    data2_e = &#123;<span class="string">'np_list'</span>: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]&#125;</span><br><span class="line">    eq_(json.dumps(data2_e, indent=<span class="number">0</span>), json_dumps(data2))</span><br></pre></td></tr></table></figure><p>上述测试代码是一个不好的实践方法，把测试目标改变了，上面测试的是 <code>data2_e</code> 和 <code>data2</code> 的 json 输出是否一致，而不是  <code>data2</code>  的 json 是否符合预期的 json 格式，这二者是截然不同的，显然我们要测试的是后者。</p><p>假设 <code>json.dumps</code> 输出不是符合标准的 json 数据，上述测试案例可以通过，但在之后的功能测试是不能通过的。</p><p>上述的测试代码已经蕴含了 <code>json.dumps</code> 一定能输出标准的 json 数据，这当然是。</p><p>按照测试原则，assert 语句的第一个应当是表征字面量，下面就是一个简单的对比。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DEFAULT_HOST = <span class="string">'https://chfw.github.io/jupyter-echarts/echarts'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_pyecharts_remote_jshost</span><span class="params">()</span>:</span></span><br><span class="line">    target_config = PyEchartsConfig(jshost=DEFAULT_HOST)</span><br><span class="line">    eq_(<span class="string">'https://chfw.github.io/jupyter-echarts/echarts'</span>, target_config.jshost) <span class="comment"># 良好的实践</span></span><br><span class="line">    eq_(DEFAULT_HOST, target_config.jshost) <span class="comment"># 糟糕的实践</span></span><br></pre></td></tr></table></figure><h3 id="函数不定参数定义与调用"><a href="#函数不定参数定义与调用" class="headerlink" title="函数不定参数定义与调用"></a>函数不定参数定义与调用</h3><p>在 Python3 中，函数定义时允许常规变量(regular argument)出现在一个不定参数(varargs argument)之后，如下面的函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sortwords</span><span class="params">(*wordlist, case_sensitive=False)</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><p>需要注意的是，调用的时候 case_sensitive 必须以关键字形式传入，类似 <code>sortwords(&#39;Apple&#39;, &#39;Orange&#39;, case_sensitive=True)</code> 。</p><p>更多的资料可以参考 <a href="https://www.python.org/dev/peps/pep-3102/" target="_blank" rel="noopener">PEP 3102</a> 。</p><p>之前在考虑 <code>page.from_charts(cls, *charts)</code> 是否添加 jshost 相关参数的时候碰到这个问题，最后考虑不添加这个特性，主要基于下面两个原因：</p><p>1 如果添加这个参数，会再调用时引起歧义，有以下两种种定义形式：</p><p>第一种： <code>Page.from_charts(jshost=None, *args)</code></p><p>这种方式有个问题，就是即使 jshost 无意设置，也需使用 None 占位。</p><p><code>Page.from_charts(chart1, chart2)</code> 调用从字面上是将两个图表合并，实际上只有一个，调用时会把 chart1 传给 jshost</p><p>第二种：<code>Page.from_charts(*args, jshost=None)</code></p><p>这个将可选的参数放置在最后，可以解决 <code>Page.from_charts(chart1, chart2)</code> 字面和实际效果一致，但是仅Python3.5+支持</p><p>2 从功能上来看，该方法只是 <code>__init__</code> 方法的补充，不一定非要和其等价。</p><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>非常感谢 <a href="https://github.com/chenjiandongx" target="_blank" rel="noopener">@chenjiandongx</a> 和 <a href="https://github.com/chfw" target="_blank" rel="noopener">@chfw</a> 两位提供问题讨论和代码复查方面的经验。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文已收录于 &lt;a href=&quot;/pyecharts-project/&quot;&gt;《pyecharts 开发专辑》&lt;/a&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文记录了在 pyecharts 开发过程中的一些想法思路和具体问题分析解决的方案。写作本文的目的主要有两个：一是工作总结，每完成一项工作需要静下心来总结工作得失，这就是一种进步和成长；二是技术分享，对于同一个知识和技术，每个人的理解和思考都是不同的，博客提供了一个很好的分享平台。&lt;/p&gt;
&lt;p&gt;本文基于 &lt;a href=&quot;https://github.com/chenjiandongx/pyecharts/pull/240&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PR 自定义模板&lt;/a&gt; 整理。&lt;/p&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://kinegratii.github.io/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="Python" scheme="http://kinegratii.github.io/tags/Python/"/>
    
      <category term="数据可视化" scheme="http://kinegratii.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>电脑开发软件的5个清单</title>
    <link href="http://kinegratii.github.io/2017/10/09/pc-software-checklist/"/>
    <id>http://kinegratii.github.io/2017/10/09/pc-software-checklist/</id>
    <published>2017-10-09T11:49:04.000Z</published>
    <updated>2018-05-01T13:50:30.451Z</updated>
    
    <content type="html"><![CDATA[<p>长假后的第一天，把电脑换成win10 64位，也重装了一些软件。本文将记录一些其中使用的软件，包含基本软件和开发工具。</p><a id="more"></a><h2 id="清单1：基本软件"><a href="#清单1：基本软件" class="headerlink" title="清单1：基本软件"></a>清单1：基本软件</h2><ul><li>百度输入法</li><li>好压：压缩软件</li><li>美图看看</li><li>everything：文件搜索</li><li>驱动精灵</li><li>福昕PDF阅读器</li><li>google：浏览器<ul><li>adblock广告去除插件</li></ul></li><li>Fences桌面整理软件</li><li>OneDrive文件存储</li><li>网易云音乐</li></ul><h2 id="清单2：基本开发工具"><a href="#清单2：基本开发工具" class="headerlink" title="清单2：基本开发工具"></a>清单2：基本开发工具</h2><ul><li>notepad++:记事本</li><li>typora:Markdown编辑器</li><li>git：代码管理库<ul><li>git账号设置</li><li>SSH公钥部署到 github和码云</li></ul></li><li>代码浏览器插件</li></ul><h2 id="清单3：社交工具"><a href="#清单3：社交工具" class="headerlink" title="清单3：社交工具"></a>清单3：社交工具</h2><ul><li>邮箱客户端<ul><li>公司邮箱</li><li>个人邮箱</li></ul></li><li>微信电脑版</li><li>QQ电脑版</li></ul><h2 id="清单4：语言及其环境"><a href="#清单4：语言及其环境" class="headerlink" title="清单4：语言及其环境"></a>清单4：语言及其环境</h2><ul><li>Java运行环境<ul><li>JRE环境变量配置</li></ul></li><li>python2.7</li><li>python3.6</li><li>Pycharm：Python开发环境<ul><li>pip源设置</li></ul></li><li>nodejs 6<ul><li>npm源设置</li></ul></li><li>hexo：博客构建</li></ul><h2 id="清单5：项目环境"><a href="#清单5：项目环境" class="headerlink" title="清单5：项目环境"></a>清单5：项目环境</h2><ul><li>Hexo博客<ul><li>Hexo安装</li><li>依赖重新安装</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;长假后的第一天，把电脑换成win10 64位，也重装了一些软件。本文将记录一些其中使用的软件，包含基本软件和开发工具。&lt;/p&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://kinegratii.github.io/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="软件" scheme="http://kinegratii.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="清单" scheme="http://kinegratii.github.io/tags/%E6%B8%85%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>django2笔记:路由path语法</title>
    <link href="http://kinegratii.github.io/2017/09/25/django2-url-path/"/>
    <id>http://kinegratii.github.io/2017/09/25/django2-url-path/</id>
    <published>2017-09-25T10:09:15.000Z</published>
    <updated>2018-05-01T13:50:30.451Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/django.png" alt="django"></p><p>9月23，<a href="https://www.djangoproject.com/" target="_blank" rel="noopener">Django</a> 发布了2.0a1版本，这是一个 feature freeze 版本，如果没有什么意外的话，2.0正式版不会再增加新的功能了。按照以往的规律，预计正式版将在12月发布。</p><blockquote><p>备注：Django 2.0 于12月2日已经正式发布。 （<a href="https://www.djangoproject.com/weblog/2017/dec/02/django-20-released/" target="_blank" rel="noopener">链接</a>）</p></blockquote><p>2.0无疑是一个里程碑版本，移除了对 Python2.7 的支持，最少需要 3.4 以上，建议使用3.5以上的版本。</p><a id="more"></a><p> <a href="https://docs.djangoproject.com/en/2.0/releases/2.0/#what-s-new-in-django-2-0" target="_blank" rel="noopener">What’s new in Django2.0</a>  文档中一共列出了三个新的特性：</p><ul><li>更简单的URL路由语法 (Simplified URL routing syntax)</li><li>admin应用的针对移动设备的优化改进(Mobile-friendly <code>contrib.admin</code>)</li><li>支持SQL开窗表达式(Window expressions)</li></ul><p>第一个特性，主要用于动态路由定义上。在Django2.0代码实现中，主要的变化是新增了 <code>django.urls.path</code> 函数，它允许使用一种更加简洁、可读的路由语法。比如之前的版本的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/$'</span>, views.year_archive),</span><br></pre></td></tr></table></figure><p>在新版本中也可以写为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">'articles/&lt;int:year&gt;/'</span>, views.year_archive),</span><br></pre></td></tr></table></figure><p>新语法支持类型转化，在上述的例子中， year_archive 函数接收到的year参数就变成整数而不是字符串。</p><p>如果你有接触过 Flask 框架，就会发现和 <a href="http://flask.pocoo.org/docs/0.12/quickstart/#variable-rules" target="_blank" rel="noopener">Variable-Rules</a> 的语法形式和功能都是相类似的。</p><h2 id="一-问题引入"><a href="#一-问题引入" class="headerlink" title="一 问题引入"></a>一 问题引入</h2><p>下面是 Django1.X 的一段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">year_archive</span><span class="params">(request, year)</span>:</span></span><br><span class="line">    year = int(year) <span class="comment"># convert str to int</span></span><br><span class="line">    <span class="comment"># Get articles from database</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail_view</span><span class="params">(request, article_id)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_view</span><span class="params">(request, article_id)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_view</span><span class="params">(request, article_id)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">'articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/'</span>, year_archive),</span><br><span class="line">    url(<span class="string">'article/(?P&lt;article_id&gt;[a-zA-Z0-9]+)/detail/'</span>, detail_view),</span><br><span class="line">    url(<span class="string">'articles/(?P&lt;article_id&gt;[a-zA-Z0-9]+)/edit/'</span>, edit_view),</span><br><span class="line">    url(<span class="string">'articles/(?P&lt;article_id&gt;[a-zA-Z0-9]+)/delete/'</span>, delete_view),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>考虑下这样的两个问题：</p><p>第一个问题，函数 <code>year_archive</code> 中year参数是字符串类型的，因此需要先转化为整数类型的变量值，当然 <code>year=int(year)</code> 不会有诸如如TypeError或者ValueError的异常。那么有没有一种方法，在url中，使得这一转化步骤可以由Django自动完成？</p><p>第二个问题，三个路由中 article_id 在业务中表示同一个字段，使用同样的正则表达式，但是你需要写三遍，当之后 article_id 规则改变后，需要同时修改三处代码，那么有没有一种方法，只需修改一处即可？</p><p>在 Django2.0 中，可以使用 <code>path</code> 解决以上的两个问题。</p><h2 id="二-使用示例"><a href="#二-使用示例" class="headerlink" title="二 使用示例"></a>二 使用示例</h2><p>这是一个简单的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'articles/2003/'</span>, views.special_case_2003),</span><br><span class="line">    path(<span class="string">'articles/&lt;int:year&gt;/'</span>, views.year_archive),</span><br><span class="line">    path(<span class="string">'articles/&lt;int:year&gt;/&lt;int:month&gt;/'</span>, views.month_archive),</span><br><span class="line">    path(<span class="string">'articles/&lt;int:year&gt;/&lt;int:month&gt;/&lt;slug&gt;/'</span>, views.article_detail),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>基本规则：</p><ul><li>使用尖括号(<code>&lt;&gt;</code>)从url中捕获值。</li><li>捕获值中可以包含一个转化器类型（converter type），比如使用 <code>&lt;int:name&gt;</code> 捕获一个整数变量。若果没有转化器，将匹配任何字符串，当然也包括了 <code>/</code> 字符。</li><li>无需添加前导斜杠。</li></ul><p>以下是根据 <a href="https://docs.djangoproject.com/en/2.0/topics/http/urls/#example" target="_blank" rel="noopener">2.0官方文档</a> 而整理的示例分析表：</p><table><thead><tr><th>请求URL</th><th>匹配项</th><th>视图函数调用形式</th></tr></thead><tbody><tr><td>/articles/2005/03/</td><td>第3个</td><td>views.month_archive(request, year=2005, month=3)</td></tr><tr><td>/articles/2003/</td><td>第1个</td><td>views.special_case_2003(request)</td></tr><tr><td>/articles/2003</td><td>无</td><td>-</td></tr><tr><td>/articles/2003/03/building-a-django-site/</td><td>第4个</td><td>views.article_detail(request, year=2003, month=3, slug=”building-a-django-site”)</td></tr></tbody></table><h2 id="三-path转化器"><a href="#三-path转化器" class="headerlink" title="三 path转化器"></a>三 path转化器</h2><blockquote><p>文档原文是Path converters，暂且翻译为转化器。</p></blockquote><p>Django默认支持以下5个转化器：</p><ul><li>str,匹配除了路径分隔符（<code>/</code>）之外的非空字符串，这是默认的形式</li><li>int,匹配正整数，包含0。</li><li>slug,匹配字母、数字以及横杠、下划线组成的字符串。</li><li>uuid,匹配格式化的uuid，如 075194d3-6885-417e-a8a8-6c931e272f00。</li><li>path,匹配任何非空字符串，包含了路径分隔符</li></ul><h2 id="四-自定义转化器"><a href="#四-自定义转化器" class="headerlink" title="四 自定义转化器"></a>四 自定义转化器</h2><h3 id="4-1-定义"><a href="#4-1-定义" class="headerlink" title="4.1 定义"></a>4.1 定义</h3><p>对于一些复杂或者复用的需要，可以定义自己的转化器。转化器是一个类或接口，它的要求有三点：</p><ul><li><p><code>regex</code> 类属性，字符串类型</p></li><li><p><code>to_python(self, value)</code> 方法，value是由类属性 <code>regex</code> 所匹配到的字符串，返回具体的Python变量值，以供Django传递到对应的视图函数中。</p></li><li><p><code>to_url(self, value)</code> 方法，和 <code>to_python</code> 相反，value是一个具体的Python变量值，返回其字符串，通常用于url反向引用。</p></li></ul><p>先看看默认的 <code>IntConverter</code> 和 <code>StringConverter</code> 是怎么实现的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntConverter</span>:</span></span><br><span class="line">    regex = <span class="string">'[0-9]+'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_python</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> int(value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_url</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> str(value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringConverter</span>:</span></span><br><span class="line">    regex = <span class="string">'[^/]+'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_python</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_url</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure><p>第二个例子，是自己实现的4位年份的转化器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FourDigitYearConverter</span>:</span></span><br><span class="line">    regex = <span class="string">'[0-9]&#123;4&#125;'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_python</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> int(value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_url</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'%04d'</span> % value</span><br></pre></td></tr></table></figure><h3 id="4-2-注册"><a href="#4-2-注册" class="headerlink" title="4.2 注册"></a>4.2 注册</h3><p>使用<code>register_converter</code> 将其注册到URL配置中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> register_converter, path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> converters, views</span><br><span class="line"></span><br><span class="line">register_converter(converters.FourDigitYearConverter, <span class="string">'yyyy'</span>)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'articles/2003/'</span>, views.special_case_2003),</span><br><span class="line">    path(<span class="string">'articles/&lt;yyyy:year&gt;/'</span>, views.year_archive),</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="五-使用正则表达式"><a href="#五-使用正则表达式" class="headerlink" title="五 使用正则表达式"></a>五 使用正则表达式</h2><p>如果上述的paths和converters还是无法满足需求，也可以使用正则表达式，这时应当使用 <code>django.urls.re_path</code> 函数。</p><p>在Python正则表达式中，命名式分组语法为 <code>(?P&lt;name&gt;pattern)</code> ，其中name为名称， pattern为待匹配的模式。</p><p>之前的示例代码也可以写为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'articles/2003/'</span>, views.special_case_2003),</span><br><span class="line">    re_path(<span class="string">'articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/'</span>, views.year_archive),</span><br><span class="line">    re_path(<span class="string">'articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/'</span>, views.month_archive),</span><br><span class="line">    re_path(<span class="string">'articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/(?P&lt;slug&gt;[^/]+)/'</span>, views.article_detail),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这段代码和之前的代码实现了基本的功能，但是还是有一些区别：</p><ul><li>这里的代码匹配更加严格，比如year=10000在这里就无法匹配。</li><li>传递给视图函数的变量都是字符串类型，这点和 <code>url</code> 是一致的。</li></ul><p><strong>无命名分组</strong></p><p>一般来说，不建议使用这种方式，因为有可能引入歧义，甚至错误。</p><h2 id="六-Import变动"><a href="#六-Import变动" class="headerlink" title="六 Import变动"></a>六 Import变动</h2><p><code>django.urls.path</code> 可以看成是 <code>django.conf.urls.url</code> 的增强形式。</p><p>为了方便，其引用路径也有所变化，请注意下 <code>urls</code> 包路径的变更，不再是 <code>conf</code> 的子包了，目前和 <code>views</code> 、<code>conf</code> 一样，被认为是 Django 的核心组件。</p><table><thead><tr><th>1.X</th><th>2.0</th><th>备注</th></tr></thead><tbody><tr><td>-</td><td>django.urls.path</td><td>新增，url的增强版</td></tr><tr><td>django.conf.urls.include</td><td>django.urls.include</td><td>路径变更</td></tr><tr><td>django.conf.urls.url</td><td>django.urls.re_path</td><td>异名同功能，url不会立即废弃</td></tr></tbody></table><h2 id="七-代码改写"><a href="#七-代码改写" class="headerlink" title="七 代码改写"></a>七 代码改写</h2><p>将“问题引入”一节的代码使用新的path函数可以改写如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, register_converter</span><br><span class="line"><span class="keyword">from</span> django.urls.converters <span class="keyword">import</span> SlugConverter</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FourDigitYearConverter</span>:</span></span><br><span class="line">    regex = <span class="string">'[0-9]&#123;4&#125;'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_python</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> int(value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_url</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'%04d'</span> % value</span><br><span class="line"></span><br><span class="line">register_converter(SlugConverter, <span class="string">'article_id'</span>)</span><br><span class="line">register_converter(FourDigitYearConverter, <span class="string">'year'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">year_archive</span><span class="params">(request, year)</span>:</span></span><br><span class="line">    print(type(year)) <span class="comment"># &lt;class 'int'&gt;</span></span><br><span class="line">    <span class="comment"># Get articles from database</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail_view</span><span class="params">(request, article_id)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_view</span><span class="params">(request, article_id)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_view</span><span class="params">(request, article_id)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'articles/&lt;year:year&gt;/'</span>, year_archive),</span><br><span class="line">    path(<span class="string">'article/&lt;article_id:article_id&gt;/detail/'</span>, detail_view),</span><br><span class="line">    path(<span class="string">'articles/&lt;article_id:article_id&gt;/edit/'</span>, edit_view),</span><br><span class="line">    path(<span class="string">'articles/&lt;article_id:article_id&gt;/delete/'</span>, delete_view),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="八-总结"><a href="#八-总结" class="headerlink" title="八 总结"></a>八 总结</h2><p>第一，目前 路由（url）到视图（View）的流程可以概括为四个步骤：</p><ol><li>url匹配</li><li>正则捕获</li><li>变量类型转化</li><li>视图调用</li></ol><p>Django2.0 和之前相比多了 <em>变量类型转化</em> 这一步骤。</p><p>第二，新的path语法可以解决一下以下几个场景：</p><ul><li>类型自动转化</li><li>公用正则表达式</li></ul><p>问题描述可参考 “问题引入” 一节。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/django.png&quot; alt=&quot;django&quot;&gt;&lt;/p&gt;
&lt;p&gt;9月23，&lt;a href=&quot;https://www.djangoproject.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Django&lt;/a&gt; 发布了2.0a1版本，这是一个 feature freeze 版本，如果没有什么意外的话，2.0正式版不会再增加新的功能了。按照以往的规律，预计正式版将在12月发布。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;备注：Django 2.0 于12月2日已经正式发布。 （&lt;a href=&quot;https://www.djangoproject.com/weblog/2017/dec/02/django-20-released/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;链接&lt;/a&gt;）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.0无疑是一个里程碑版本，移除了对 Python2.7 的支持，最少需要 3.4 以上，建议使用3.5以上的版本。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://kinegratii.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Django" scheme="http://kinegratii.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django-Echarts系列：js依赖文件管理</title>
    <link href="http://kinegratii.github.io/2017/09/06/django-echarts-js-manage/"/>
    <id>http://kinegratii.github.io/2017/09/06/django-echarts-js-manage/</id>
    <published>2017-09-06T03:35:47.000Z</published>
    <updated>2018-05-01T13:50:30.451Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文已收录于 <a href="/pyecharts-project/">《pyecharts 开发专辑》</a> 。</p></blockquote><p><a href="https://github.com/kinegratii/django-echarts" target="_blank" rel="noopener">django-echarts</a> 是本人正在开发的一个开源项目，该项目旨在将 <a href="https://github.com/chenjiandongx/pyecharts" target="_blank" rel="noopener">pyecharts</a> 库整合到Django web框架中，从而形成echarts-python-django 大整合的项目。</p><p>继之前简单的一个使用示例之后，最近花了几天完成了一种的一个功能插件：js依赖文件管理。</p><a id="more"></a><h2 id="1-Django-Echarts概述"><a href="#1-Django-Echarts概述" class="headerlink" title="1 Django-Echarts概述"></a>1 Django-Echarts概述</h2><p>django-echarts这个项目的目标和pyecharts是一致的，即在目标html页面上渲染图表。要完成一个Echarts图表，从最后渲染完成的HTML结构来看，至少应当包含以下三个部分：</p><ul><li>图表容器控件，比如<code>&lt;div id=&quot;id_mycharts&quot;&gt;&lt;/div&gt;</code></li><li>js依赖文件，比如 <code>&lt;script src=&#39;/static/echarts/echarts.min.js&#39;&gt;&lt;/script&gt;</code></li><li>图表初始化代码,代码中 <code>myCharts.setOptions(Foo)</code> 所在的script标签。</li></ul><p>这个排序按照一般出现的顺序，将所有 script 标签放置在body标签的最后，有利于页面的加载。</p><p>在这一过程中，pyecharts 项目为此做了大量的工作，使得我们能够快速地依据功能要求构建出模板渲染所需的数据，这些数据在Django模板系统中称之为 <em>Context</em>。</p><p>在实际应用过程中，每个页面的结构都是各式各样的，不能一概而论，因此django-echarts的主要职责：</p><ul><li>如何创建上述三个标签（代码片段）。</li><li>上述标签在目标html的位置和结构由用户选择。</li><li>对于一些简单的页面，可以提供一些shortcut工具。</li></ul><h2 id="2-设计思路"><a href="#2-设计思路" class="headerlink" title="2 设计思路"></a>2 设计思路</h2><h3 id="2-1-目标"><a href="#2-1-目标" class="headerlink" title="2.1 目标"></a>2.1 目标</h3><p>三者之前没有太大的关联性，是可以单独拿出来讨论其设计思想和实现方式的。js 依赖文件管理最终的目标是<strong>构建js文件路径字符串</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'/static/echarts/echarts.min.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'/static/echarts/map/china.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p> 虽然最后生成的是一个或多个script标签，但依据 Django MTV 原则，标签的构建应当由模板系统负责。</p></blockquote><p>核心的src属性由路径和js文件名两部分组成。路径的意义在于，对于同一个 echarts.min.js 可以由不同的地方提供，这称之为repository。而文件名是由用户输入提供的。使用代码表示如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generte_js_link</span><span class="params">(js_name)</span>:</span></span><br><span class="line">    host = <span class="string">''</span> <span class="comment"># TODO Where to pick a host according the settings</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&#123;host&#125;/&#123;js_name&#125;.js'</span>.format(host=host, js_name=js_name)</span><br></pre></td></tr></table></figure><h3 id="2-2-问题"><a href="#2-2-问题" class="headerlink" title="2.2 问题"></a>2.2 问题</h3><p>综上所述，js 依赖文件管理解决的问题：</p><ul><li>需要管理哪些依赖文件</li><li>哪些repository可以提供js文件，其中哪些可以实现对其的支持。</li><li>如何在不同repository之间尽可能平稳的切换，即它们之间必须提供统一的API</li><li>需要对外提供哪些API，即在哪些情况下可能使用到这个功能</li></ul><h2 id="3-仓库-repository-与文件"><a href="#3-仓库-repository-与文件" class="headerlink" title="3 仓库(repository)与文件"></a>3 仓库(repository)与文件</h2><p>按照正常逻辑，文件名由用户根据实际功能需求指定，其有效性应当交由用户确保。在实际过程不同repository可提供的文件是不一样。js文件分为核心库文件和地图数据文件两种。pyecharts能够提供本地和远程两种类型的repository，加上Django整合时，项目静态文件也可以作为一种repository存在，因此共有三种。</p><p>将repository和文件类型进行交叉分析，可整理出以下的一张表格：</p><table><thead><tr><th>仓库</th><th>核心库文件</th><th>地图数据文件</th><th>核心库版本支持</th><th>远程/ 本地</th></tr></thead><tbody><tr><td>pyecharts本地</td><td>可提供</td><td>可提供</td><td>无，不可控</td><td>本地</td></tr><tr><td>pyecharts远程</td><td>可提供</td><td>可提供</td><td>无，不可控</td><td>远程</td></tr><tr><td>官方CDN</td><td>不提供</td><td>提供</td><td>-</td><td>远程</td></tr><tr><td>公共CDN</td><td>可提供</td><td>不提供</td><td>支持</td><td>远程</td></tr><tr><td>项目静态目录</td><td>可自定义</td><td>可自定义</td><td>可自定义</td><td>本地</td></tr></tbody></table><p>分析如下：</p><ul><li>首先的是pyecharts本地作为存储仓库是不太合适，同为本地文件存储，Django项目静态库显然是一个更为合适的选择。</li><li>pyecharts远程库，路径为 <a href="https://chfw.github.io/jupyter-echarts/echarts，" target="_blank" rel="noopener">https://chfw.github.io/jupyter-echarts/echarts，</a> 该库的优势在于提供了一些列的自定义地图，但弱势是核心库文件没有版本管理，而且 github 仓库不建议作为静态文件托管服务。</li><li>官方CDN：其实指的是地图文件数据下载的源地址。</li><li>公共CDN：优势在于支持版本管理，缺点是不提供地图数据文件。公共CDN仅选择<a href="http://echarts.baidu.com/tutorial.html" target="_blank" rel="noopener">Echarts官方教程</a>提及的三个CDN，其余的已经很久没有更新了。</li><li>项目静态目录：通常由 <code>setttings.STATIC_URL</code>指定。 这是开发者自己从零开始构建的，因此自由度最大。为了方便，可开发从其他远程仓库下载文件的功能。</li></ul><p>一个通常的使用场景如下：</p><ul><li>试验django-echarts，仅使用远程仓库，这样不必配置静态文件设置等。</li><li>如果可用，通过下载工具下载到本地，并进行一系列开发。</li><li>部署上线时，根据需要切换到CDN。</li></ul><h2 id="4-配置"><a href="#4-配置" class="headerlink" title="4 配置"></a>4 配置</h2><h3 id="4-1-基本配置"><a href="#4-1-基本配置" class="headerlink" title="4.1 基本配置"></a>4.1 基本配置</h3><p>配置是项目初始化需要使用的。默认的配置如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DEFAULT_SETTINGS = &#123;</span><br><span class="line">    <span class="string">'echarts_version'</span>: <span class="string">'3.7.0'</span>,</span><br><span class="line">    <span class="string">'lib_js_host'</span>: <span class="string">'bootcdn'</span>,</span><br><span class="line">    <span class="string">'map_js_host'</span>: <span class="string">'echarts'</span>,</span><br><span class="line">    <span class="string">'local_host'</span>: <span class="keyword">None</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实际运行之前，会将用户自定义配置和默认配置进行合并，并向外提供统一的模块变量用于访问。</p><blockquote><p>关于这一部分可以期待之后的《django-echarts系列：配置模块》一文。</p></blockquote><p>由于核心库文件和地图数据文件需要分开托管，因此需要使用两个变量分别指定和设置。二者都有自己有效的可选值。</p><h3 id="4-2-远程-本地切换"><a href="#4-2-远程-本地切换" class="headerlink" title="4.2 远程/本地切换"></a>4.2 远程/本地切换</h3><p> <code>local_host</code>的作用有两点：</p><ul><li>提供公用变量，当 <code>lib_js_host</code> 和 <code>map_js_host</code> 同时指定本地仓库时，可以借助该变量</li><li>下载工具的目标目录。</li></ul><h2 id="5-运行分析"><a href="#5-运行分析" class="headerlink" title="5 运行分析"></a>5 运行分析</h2><h3 id="5-1-分开托管和文件识别"><a href="#5-1-分开托管和文件识别" class="headerlink" title="5.1 分开托管和文件识别"></a>5.1 分开托管和文件识别</h3><p>由于不同仓库提供的文件不同，通常分为可提供核心库文件和地图数据文件，因此需要分别两个查询表（在Python使用一个dict表示即可）。</p><p>这就带来了一个问题：用户输入的是 js_name，只有这个参数，而且由于自定义地图文件，理论上可以是任何一个有效的文件名字符串，如何识别为核心库文件还是地图数据文件，即从哪个字典查询，成了一个待解决的问题。</p><p>这个没有一个百分百正确的答案。目前采用一个简单办法：由于公共CDN提供的核心库文件是一定的，可提供一个核心库文件列表，判断js_name是否在其中即可。</p><h3 id="5-2-输出URL"><a href="#5-2-输出URL" class="headerlink" title="5.2 输出URL"></a>5.2 输出URL</h3><p>当确定完某一个仓库后，之后的url构建就比较简单了，本质上来说是python string format的一些封装。仓库路径具体和一些因素有关，这些因素都需要在项目初始化就已经确定了，放在 settings 模块是最为合适了。目前支持以下字段：</p><ul><li>echarts_version：版本字符串，一些公共CDN需要指定版本号。</li><li>STATIC_URL：静态文件目录，通常用于项目本地仓库，该值等于<code>settings.STATIC_URL</code>.</li></ul><p>在实现过程中，也有两点问题需要注意：</p><ul><li>字段的大小写问题，为了和<code>settings.STATIC_URL</code>一致，也采用了大写变量</li><li>目录后缀<code>/</code> ,依据Django规范 STATIC_URL是带有/的，而pyecharts的远程路径没有带有/，以及自己设置的第三方CDN中，这个问题需要作统一处理。目前是按照pyecharts没有带有/，不排除之后会依照Django规范，但是对外部使用是没有任何影响的。</li></ul><p>基本代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Host</span><span class="params">(object)</span>:</span></span><br><span class="line">    HOST_LOOKUP = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name_or_host, context=None, host_lookup=None, **kwargs)</span>:</span></span><br><span class="line">        context = context <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">        host_lookup = host_lookup <span class="keyword">or</span> self.HOST_LOOKUP</span><br><span class="line">        host = host_lookup.get(name_or_host, name_or_host)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self._host = host.format(**context).rstrip(<span class="string">'/'</span>)</span><br><span class="line">        <span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">            self._host = <span class="keyword">None</span></span><br><span class="line">            <span class="keyword">raise</span> KeyError(<span class="string">'The "&#123;0&#125;" value is not applied for the host.'</span>.format(*e.args))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">host_url</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._host</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_js_link</span><span class="params">(self, js_name)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;0&#125;/&#123;1&#125;.js'</span>.format(self._host, js_name)</span><br></pre></td></tr></table></figure><h3 id="5-3-渲染html"><a href="#5-3-渲染html" class="headerlink" title="5.3 渲染html"></a>5.3 渲染html</h3><p>这一过程是Django模板系统负责的，为了方面可以自定义一个模板标签echarts_js_dependencies解决这个问题。</p><p>以下是基本代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@register.simple_tag(takes_context=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echarts_js_dependencies</span><span class="params">(context, *args)</span>:</span></span><br><span class="line">    links = []</span><br><span class="line">    <span class="keyword">for</span> option_or_name <span class="keyword">in</span> args:</span><br><span class="line">        <span class="keyword">if</span> isinstance(option_or_name, Base):</span><br><span class="line">            <span class="keyword">for</span> js_name <span class="keyword">in</span> option_or_name.get_js_dependencies():</span><br><span class="line">                <span class="keyword">if</span> js_name <span class="keyword">not</span> <span class="keyword">in</span> links:</span><br><span class="line">                    links.append(js_name)</span><br><span class="line">        <span class="keyword">elif</span> isinstance(option_or_name, six.text_type):</span><br><span class="line">            <span class="keyword">if</span> option_or_name <span class="keyword">not</span> <span class="keyword">in</span> links:</span><br><span class="line">                links.append(option_or_name)</span><br><span class="line">    links = map(DJANGO_ECHARTS_SETTING.host_store.generate_js_link, links)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> template.Template(<span class="string">'&lt;br/&gt;'</span>.join([<span class="string">'&lt;script src="&#123;link&#125;"&gt;&lt;/script&gt;'</span>.format(link=l) <span class="keyword">for</span> l <span class="keyword">in</span> links])).render(</span><br><span class="line">        context)</span><br></pre></td></tr></table></figure><p>有几个注意点：</p><ul><li>标签是支持多个script渲染的。</li><li>为了方便，列表的每一项支持 文件名或者 <code>pyecharts.base.Base</code>对象。</li><li>在多个标签输出时，需要去掉那些重复的文件。</li><li>因为html结构简单，所以使用<code>register.simple_tag</code> 就可以了。</li></ul><h2 id="6-CLI与Django命令"><a href="#6-CLI与Django命令" class="headerlink" title="6 CLI与Django命令"></a>6 CLI与Django命令</h2><p>基于 django manage command 实现一个简单的 CLI，其核心功能是js文件下载。</p><p>下载工具提供将远程的js文件同步到本地静态文件目录中。该功能为manage命令，需符合其的一些用法规范。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">usage: manage.py download_echarts_js [-h] [--version] [-v &#123;0,1,2,3&#125;]</span><br><span class="line">                                     [--settings SETTINGS]</span><br><span class="line">                                     [--pythonpath PYTHONPATH] [--traceback]</span><br><span class="line">                                     [--no-color] [--js_host JS_HOST]</span><br><span class="line">                                     js_name [js_name ...]</span><br></pre></td></tr></table></figure><p>远程仓库的选择和限制条件可以使用伪代码表示如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">host = &apos;&apos;</span><br><span class="line">if(命令提供了--js_host参数)&#123;</span><br><span class="line">    host = js_host参数值</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    if(js_name是否和核心库文件)&#123;</span><br><span class="line">        host = settings.DJANGO_ECHARTS[&apos;lib_js_host&apos;]</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        host = settings.DJANGO_ECHARTS[&apos;map_js_host&apos;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">if(host不是本地仓库)&#123;</span><br><span class="line">    执行后续操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本地仓库的选择：只有一个限制条件就是符合本地仓库的要求，即必须以 settings.STATIC_URL 开头。</p><p>在配置方面（源目录、目标目录）仅支持 <code>DJANGO_ECHARTS</code> ，暂时还不支持命令行参数传入。这是下一阶段的重点内容。</p><h2 id="7-和pyecharts的异同"><a href="#7-和pyecharts的异同" class="headerlink" title="7 和pyecharts的异同"></a>7 和pyecharts的异同</h2><h3 id="7-1-扩展和取舍"><a href="#7-1-扩展和取舍" class="headerlink" title="7.1 扩展和取舍"></a>7.1 扩展和取舍</h3><p>Django-Echarts是pyecharts在Django环境的适配，在此过程中难免有所扩展和舍弃。</p><ul><li>在本地存储（离线模式）中，使用Django项目静态目录取代pyecharts本地js存储，并提供一个下载工具将远程js文件下载到Django静态目录，以便平稳过渡。</li><li>提供一些常用CDN。</li><li>分析ECharts组成，提供一些模板标签渲染Echarts的每个部件。</li></ul><blockquote><p>由于 pyecharts 尚未实现本地 js 库的完全独立，django_echarts 只是从形式上实现独立，在实际运行过程中还会引用js相关内容，期待pyecharts在这方面有所发展。</p></blockquote><h3 id="7-2-展望"><a href="#7-2-展望" class="headerlink" title="7.2 展望"></a>7.2 展望</h3><p> 本项目是基于 pyecharts 而发展的。<a href="https://github.com/chenjiandongx/pyecharts" target="_blank" rel="noopener">pyecharts</a>是一个非常棒的项目，解决在Python中使用echarts的问题，加强了Python在数据可视化方面的应用。</p><p>另一方面pyecharts刚刚面世两三个，目前着重于Echarts实例创建这一问题上，对于外围环境的问题涉及有所不足。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文已收录于 &lt;a href=&quot;/pyecharts-project/&quot;&gt;《pyecharts 开发专辑》&lt;/a&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kinegratii/django-echarts&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;django-echarts&lt;/a&gt; 是本人正在开发的一个开源项目，该项目旨在将 &lt;a href=&quot;https://github.com/chenjiandongx/pyecharts&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pyecharts&lt;/a&gt; 库整合到Django web框架中，从而形成echarts-python-django 大整合的项目。&lt;/p&gt;
&lt;p&gt;继之前简单的一个使用示例之后，最近花了几天完成了一种的一个功能插件：js依赖文件管理。&lt;/p&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://kinegratii.github.io/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="数据可视化" scheme="http://kinegratii.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>typescript声明文件</title>
    <link href="http://kinegratii.github.io/2017/08/27/typescript-declaration-file/"/>
    <id>http://kinegratii.github.io/2017/08/27/typescript-declaration-file/</id>
    <published>2017-08-27T10:24:02.000Z</published>
    <updated>2018-05-01T13:50:30.451Z</updated>
    
    <content type="html"><![CDATA[<p>TypeScript声明文件。</p><a id="more"></a><p>if you want to use relative path in the import, you will need:</p><ul><li>put the add.d.ts next to add.js</li><li>define the file as an external module:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// add.d.ts</span><br><span class="line">declare function add(n1: number, n2: number): number;</span><br><span class="line">export = add;</span><br></pre></td></tr></table></figure><p>i.e. loose the “declare module “add”” part.</p><p>There are two ways to define declarations for a .js module:</p><p>1 using <code>declare module &quot;foo&quot;</code> and then you can have multiple module definitions in the same file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// mydefinitions.d.ts</span><br><span class="line">declare module &quot;mod1&quot; &#123;</span><br><span class="line">   export var x = 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare module &quot;mod2&quot; &#123;</span><br><span class="line">   export var y = 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare module &quot;mod3&quot; &#123;</span><br><span class="line">   export var z = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and consuming them would have to be using absolute names:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// main.ts</span><br><span class="line"></span><br><span class="line">/// &lt;reference path=&quot;myDefintions.d.ts&quot; /&gt;</span><br><span class="line">import * as mod1 from &quot;mod1&quot;;</span><br><span class="line">import mod2 = require(&quot;mod2&quot;);</span><br><span class="line">import &#123;z&#125; from &quot;mod3&quot;;</span><br></pre></td></tr></table></figure><p>2 alternatively you can define as a file, where the name of the file is the name of the module</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// myModule.d.ts</span><br><span class="line"></span><br><span class="line">declare var m = 0;</span><br><span class="line">export = m;</span><br></pre></td></tr></table></figure><p>and consume it as a normal .ts module:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import m = require(&quot;./myModule&quot;);</span><br><span class="line">m.toString();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TypeScript声明文件。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://kinegratii.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Typescript" scheme="http://kinegratii.github.io/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>【项目】高德地图位置选择器</title>
    <link href="http://kinegratii.github.io/2017/08/09/amap-position-picker/"/>
    <id>http://kinegratii.github.io/2017/08/09/amap-position-picker/</id>
    <published>2017-08-09T13:08:12.000Z</published>
    <updated>2018-05-01T13:50:30.451Z</updated>
    
    <content type="html"><![CDATA[<p>基于高德地图的位置选择jQuery插件。该项目结合了个人相关开发经验，分离功能独立的构件，严格遵守javascript开发规范。现已收录于开源中国中，主页为 <a href="https://www.oschina.net/p/amappositionpicker" target="_blank" rel="noopener">https://www.oschina.net/p/amappositionpicker</a> 。</p><a id="more"></a><blockquote><p>从v0.9.0起，项目名称由 bootstrap.AMapPositionPicker 更改为 AMapPositionPicker。</p></blockquote><p>主要特性有：</p><ul><li>AMD &amp; CMD 引入</li><li><code>data-*</code> 属性配置</li><li>初始位置数据</li><li>浏览器定位</li><li>字段显示格式、验证</li><li>数据控件绑定</li><li>支持地理逆编码</li><li>POI搜索</li><li>工具：显示点标记</li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>1 依次引入高德地图JS、jQuery、Bootstrap和bootstrap.AMapPositionPicker.min.js文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://webapi.amap.com/maps?v=1.3&amp;key=您申请的key值"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/jquery/1.11.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/bootstrap/3.3.6/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./dist/bootstrap.AMapPositionPicker.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2 在目标输入框初始化选项。</p><p>html代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"id_address_input"</span> <span class="attr">name</span>=<span class="string">"address"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>JS代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#id_address_input"</span>).AMapPositionPicker();</span><br></pre></td></tr></table></figure><p>更多示例可查看 <a href="http://kinegratii.oschina.io/bootstrap-amappositionpicker/index.html" target="_blank" rel="noopener">文档&amp;示例</a>。</p><h2 id="项目开发"><a href="#项目开发" class="headerlink" title="项目开发"></a>项目开发</h2><p>在开发过程中，参考了<a href="https://github.com/Eonasdan/bootstrap-datetimepicker" target="_blank" rel="noopener">Eonasdan / bootstrap-datetimepicker</a>等项目的模块结构。遵循标准通用的代码结构，以适应于多种环境。</p><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p>项目使用gulp工具构建。</p><p>生成 release 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp release</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于高德地图的位置选择jQuery插件。该项目结合了个人相关开发经验，分离功能独立的构件，严格遵守javascript开发规范。现已收录于开源中国中，主页为 &lt;a href=&quot;https://www.oschina.net/p/amappositionpicker&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.oschina.net/p/amappositionpicker&lt;/a&gt; 。&lt;/p&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://kinegratii.github.io/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="高德地图" scheme="http://kinegratii.github.io/tags/%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE/"/>
    
      <category term="项目" scheme="http://kinegratii.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>pyecharts使用示例</title>
    <link href="http://kinegratii.github.io/2017/08/02/pyecharts-example/"/>
    <id>http://kinegratii.github.io/2017/08/02/pyecharts-example/</id>
    <published>2017-08-02T01:26:37.000Z</published>
    <updated>2018-05-01T13:50:30.451Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文已收录于 <a href="/pyecharts-project/">《pyecharts 开发专辑》</a> 。</p></blockquote><p><a href="https://github.com/chenjiandongx/pyecharts" target="_blank" rel="noopener">pyechart</a> 是一个用于生成 Echarts 图表的类库。实际上就是 Echarts 与 Python 的对接。</p><a id="more"></a><blockquote><p><a href="https://github.com/ecomfe/echarts" target="_blank" rel="noopener">Echarts</a> 是百度开源的一个数据可视化 JS 库。看了官方的介绍文档，觉得很不错，就想看看有没有人实现了 Python 库可以直接调用的。Github 上找到了一个 <a href="https://github.com/yufeiminds/echarts-python" target="_blank" rel="noopener">echarts-python</a> 不过这个项目已经很久没更新且也没什么介绍文档。借鉴了该项目，就自己动手实现一个，于是就有了 pyecharts。API 接口是从另外一个图表库 <a href="https://github.com/Kozea/pygal" target="_blank" rel="noopener">pygal</a> 中模仿的。</p></blockquote><p>目前项目还处于快速开发阶段，一些API还没有完全稳定下来。先迫不及待写了几个简单的例子。</p><h2 id="与-tablib整合"><a href="#与-tablib整合" class="headerlink" title="与 tablib整合"></a>与 tablib整合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tablib</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Bar</span><br><span class="line"></span><br><span class="line">ds = tablib.Dataset()</span><br><span class="line">ds.headers = [<span class="string">'Name'</span>, <span class="string">'height'</span>]</span><br><span class="line">ds.append([<span class="string">'Tim'</span>, <span class="number">167</span>])</span><br><span class="line">ds.append([<span class="string">'John'</span>, <span class="number">170</span>])</span><br><span class="line">ds.append([<span class="string">'Tus'</span>, <span class="number">159</span>])</span><br><span class="line">ds.append([<span class="string">'Bob'</span>, <span class="number">159</span>])</span><br><span class="line"></span><br><span class="line">bar = Bar(<span class="string">'The height'</span>)</span><br><span class="line">bar.add(<span class="string">'Height'</span>, ds.get_col(<span class="number">0</span>), ds.get_col(<span class="number">1</span>))</span><br><span class="line">bar.render(<span class="string">'height_bar.html'</span>)</span><br></pre></td></tr></table></figure><p>显示示例</p><p><img src="/images/height_bar_demo.jpg" alt="height_bar_demo"></p><h2 id="与networkx整合"><a href="#与networkx整合" class="headerlink" title="与networkx整合"></a>与networkx整合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br><span class="line"><span class="keyword">from</span> networkx.readwrite <span class="keyword">import</span> json_graph</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Graph</span><br><span class="line"></span><br><span class="line">g = nx.Graph()</span><br><span class="line"></span><br><span class="line">g.add_node(<span class="string">'N1'</span>, name=<span class="string">'Node 1'</span>)</span><br><span class="line">g.add_node(<span class="string">'N2'</span>, name=<span class="string">'Node 2'</span>)</span><br><span class="line">g.add_node(<span class="string">'N3'</span>, name=<span class="string">'Node 3'</span>)</span><br><span class="line">g.add_edge(<span class="string">'N1'</span>, <span class="string">'N2'</span>)</span><br><span class="line">g.add_edge(<span class="string">'N1'</span>, <span class="string">'N3'</span>)</span><br><span class="line"></span><br><span class="line">g_data = json_graph.node_link_data(g)</span><br><span class="line"></span><br><span class="line">print(g_data)</span><br><span class="line"></span><br><span class="line">eg = Graph(<span class="string">'设备最新拓扑图'</span>)</span><br><span class="line">eg.add(<span class="string">'Devices'</span>, nodes=g_data[<span class="string">'nodes'</span>], links=g_data[<span class="string">'links'</span>])</span><br><span class="line"><span class="comment"># eg.show_config()</span></span><br><span class="line">eg.render()</span><br></pre></td></tr></table></figure><p>显示示例</p><p><img src="/images/device_graph.jpg" alt="device_graph"></p><h2 id="在Django中使用"><a href="#在Django中使用" class="headerlink" title="在Django中使用"></a>在Django中使用</h2><p>自己简单的实现一个在Django中使用Echarts的例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> django.views.generic.base <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EchartsBaseMixin</span><span class="params">(object)</span>:</span></span><br><span class="line">    option = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_echarts_option</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.option</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EchartsView</span><span class="params">(EchartsBaseMixin, View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, **kwargs)</span>:</span></span><br><span class="line">        echarts_option = self.get_echarts_option(**kwargs)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(data=echarts_option, safe=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文已收录于 &lt;a href=&quot;/pyecharts-project/&quot;&gt;《pyecharts 开发专辑》&lt;/a&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenjiandongx/pyecharts&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pyechart&lt;/a&gt; 是一个用于生成 Echarts 图表的类库。实际上就是 Echarts 与 Python 的对接。&lt;/p&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://kinegratii.github.io/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="数据可视化" scheme="http://kinegratii.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Django项目全栈笔记</title>
    <link href="http://kinegratii.github.io/2017/07/31/django-full-stack-note/"/>
    <id>http://kinegratii.github.io/2017/07/31/django-full-stack-note/</id>
    <published>2017-07-31T02:55:06.000Z</published>
    <updated>2018-05-01T13:50:30.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>BWS项目是自己一年来在开发的项目。本文就项目中一些技术选型、功能实现、项目流程做一些简单的总结。</p><a id="more"></a><h2 id="python3"><a href="#python3" class="headerlink" title="python3"></a>python3</h2><p>虽然Python3发布已经10年之久，但是2和3之争直到今天依旧存在，对于如何学习，每个人都有自己的理解和学习策略。我个人看法：</p><ul><li>果断学习面向未来的3；</li><li>3和2的差别对于学习过程没有太多的影响，学好了3自然也能够很快上手2了；</li><li>常见的第三方库大多数（80%以上）是支持Python3的；</li><li>不过在系统安装的时候总是23共存的，可以自由切换；</li></ul><p>今年4月份重新开发的时候做了一个比较激进的做法：<strong>完全抛弃对Python2的支持</strong>。当时的考量，把这个项目作为Django持续学习的一个示范项目，毕竟 Django的下一个大版本2.0（预计2017年12月发布），也已经要求最低版本为3.5了。</p><p>其实在项目中使用几个Python2不支持的语法和没有的标准库，就可以达到以上目的，具体来说，在代码中使用了以下几个语法：</p><ul><li>字典合并创建语法（<a href="https://www.python.org/dev/peps/pep-0448/" target="_blank" rel="noopener">PEP448</a>）</li><li>强制关键字传参（<a href="https://www.python.org/dev/peps/pep-3102/" target="_blank" rel="noopener">PEP3102</a>）</li></ul><p>根据 PEP448，在Python3.5中可以使用更加简洁明了的代码实现合并多个字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3.5+</span></span><br><span class="line">combination = &#123;**first_dictionary, <span class="string">"x"</span>: <span class="number">1</span>, <span class="string">"y"</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.5以下</span></span><br><span class="line">combination = first_dictionary.copy()</span><br><span class="line">combination.update(&#123;<span class="string">"x"</span>: <span class="number">1</span>, <span class="string">"y"</span>: <span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure><p>另外Python3在文本和二进制方面作了比较大的改变，这对文件导入导出功能开发提供了便利，不用再纠结2的编码问题，可以集中解决业务层面的问题。</p><h2 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h2><p>我也算是Django的忠实用户了，从1.4到1.11都有用到，不断看到Django的成长和壮大。1.4/1.8/1.11是LTS版本，项目使用的是1.10。这些年来Django比较大的变更有：</p><ul><li>自定义用户类型：这个是1.5就有的功能了，之前只能使用内置的用户类，连使用邮箱作为用户名也不能直接支持；</li><li>数据库迁移：1.7借鉴 <a href="https://bitbucket.org/andrewgodwin/south/" target="_blank" rel="noopener">South</a> 实现的，这个是开发的利器，修改用户模型时候可以使用命令一键将修改同步到数据库，而忽略具体的数据库类型；</li><li>自定义过滤查询：1.7，这个主要用于封装一些业务数据库查询。</li><li>多模板支持：1.8引入的，Django自己的模板引擎效率历来为人们所诟病，现在可以在Django中使用Jinja2这样的模板了。</li><li>表单控件支持模板渲染：Django表单其实是着重于后端验证，前端相对薄弱，导致定制起来没有那么顺手。最新的1.11引入的可以通过模板文件定制控件样式等等。</li></ul><h3 id="CBV"><a href="#CBV" class="headerlink" title="CBV"></a>CBV</h3><p><strong>强烈建议使用 Class-Based-View 组织视图处理函数。</strong></p><p>Class-Based-View 是相对于Function-Based-View而言，主要支持封装，减少重复的代码编写工作，逻辑流程清晰，经过测试过的。在具体编写代码还是一定要查看源代码，才能理解其中的功能实现。</p><p>CBV的核心是Mixin模式。</p><blockquote><p>Mixin是一种将多个类中的功能单元的进行组合的利用的方式，这听起来就像是有类的继承机制就可以实现，然而这与传统的类继承有所不同。通常mixin并不作为任何类的基类，也不关心与什么类一起使用，而是在运行时动态的同其他零散的类一起组合使用。</p></blockquote><blockquote><p>使用mixin机制有如下好处：可以在不修改任何源代码的情况下，对已有类进行扩展；可以保证组件的划分；可以根据需要，使用已有的功能进行组合，来实现“新”类；很好的避免了类继承的局限性，因为新的业务需要可能就需要创建新的子类。</p></blockquote><p>现在也基本上不写视图函数了，项目上能见到的也就是 <code>django.contrib.auth.login</code> 等几个函数了，不过现在也要改成视图类形式了。</p><h3 id="是否启用admin"><a href="#是否启用admin" class="headerlink" title="是否启用admin"></a>是否启用admin</h3><p>虽然admin是Django的主要优势所在，但是它的使用场景有限，主要由于整合许多功能，比如分页、过滤、搜索、增删改查和批量操作等等，相互之间具有非常高的耦合度。在没有提供公开的API下去实现一些定制往往是“牵一发而动全身”，最后基本上也改的是不成样子。</p><p>由于项目中没有使用内置的admin组件，增删改查的页面就需要多花一点时间自己去适配。</p><p>日志模型也要自己去设计，项目中我自己添加了ip这个字段，这个是原来所没有的。</p><h2 id="后端数据API-DRF"><a href="#后端数据API-DRF" class="headerlink" title="后端数据API - DRF"></a>后端数据API - DRF</h2><p>后端数据采用的是 <a href="http://www.django-rest-framework.org/" target="_blank" rel="noopener">Django Rest Framework</a> 这个框架，覆盖了大多数需求，包括：</p><ul><li>搜索/分页</li><li>访问权限</li><li>请求限制（频率、IP）</li><li>表单验证</li></ul><h2 id="前端-Amaze-UI"><a href="#前端-Amaze-UI" class="headerlink" title="前端 Amaze UI"></a>前端 Amaze UI</h2><p>前端UI用的是 <a href="http://amazeui.org/" target="_blank" rel="noopener">Amaze UI</a>这个框架。不过从后来的发展形势来看，这是最为错误的决定了，主要原因在于无法和后端比较平稳地整合。</p><p>Django表单中有一个比较大的问题，如何需要定制控件样式，需要在Python代码中修改，而且需要应用的每一处都需要更改，灵活度不够。目前主要有两种解决方式：</p><ul><li>使用Django1.11版本的<a href="https://docs.djangoproject.com/en/1.11/ref/forms/renderers/#" target="_blank" rel="noopener">模板功能</a>，这个功能刚刚推出，文档也只有一页的内容，不太建议使用。</li><li>使用 <a href="https://github.com/django-crispy-forms/django-crispy-forms" target="_blank" rel="noopener">django-crispy-forms</a> 第三方库，这个库的思路也是使用模板html文件渲染控件，已经有一定的使用规模，但是支持 Bootstrap这样常见的UI框架，不支持 Amaze UI。</li></ul><h2 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h2><p>实现导入导出功能主要使用的是 <a href="https://github.com/kennethreitz/tablib" target="_blank" rel="noopener">tablib</a> 和 <a href="https://github.com/django-import-export/django-import-export" target="_blank" rel="noopener">django-import-export</a> 这两个库，其中后者依赖前者。</p><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p>编写 <code>Resource</code>， 几点值得注意的地方：</p><ul><li>需要设置表头，不仅需要指定字段<code>Meta.fields</code>，同时也要显示指定 <code>Meta.export_order</code> 的值，通常和 <code>Meta.fields</code>一样即可。</li><li><code>Meta.fields</code> 里的元素必须是模型的数据库字段，不能是自定义的 property，这一点和 <code>ModelAdmin.list_display</code> 不一样。</li><li>可以使用 <code>dehydrate_FOO</code> 函数重写导出内容</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BillResource</span><span class="params">(resources.ModelResource)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_export_headers</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'流水号'</span>,<span class="string">'月份'</span>, <span class="string">'类型'</span>,<span class="string">'单价'</span>,<span class="string">'用量'</span>, <span class="string">'金额'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dehydrate_price</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> obj.get_price_display</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = models.Bill</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'month'</span>, <span class="string">'resource_type'</span>,<span class="string">'price'</span>, <span class="string">'amout'</span>, <span class="string">'total'</span>)</span><br><span class="line">        export_order = fields</span><br></pre></td></tr></table></figure><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>django-import-export也提供了几个Mixin，但问题这些和admin组件耦合很高，不利于一些自定义操作，所以直接使用tablib库比较好。根据官方文档，可以使用以下代码实现文件导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imported_data = Dataset().load(open(<span class="string">'data.csv'</span>).read())</span><br></pre></td></tr></table></figure><p>但其实load还有几个比较重要的参数：</p><ul><li>format：文件格式，如果不写，使用自动识别，但有出错的机率，之前试验过一个xlsx文件在不同环境下识别为json文件的，因此建议这个参数也留给用户输入</li><li>headers：表示第一行是否是表头，这个参数在文档中没有表明，需要自行查看源代码获取相关信息。</li></ul><p>所以最后就写成下面这个样子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BillUploadForm</span><span class="params">(form.Form)</span>:</span></span><br><span class="line">    import_file = forms.FileField()</span><br><span class="line">    format = forms.ChoiceField(choices=((<span class="string">'xlsx'</span>, <span class="string">'xlsx'</span>), (<span class="string">'xls'</span>, <span class="string">'xls'</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入</span></span><br><span class="line"></span><br><span class="line">tablib.Dataset().load(form.cleaned_data[<span class="string">'import_file'</span>].read(), format=form.cleaned_data[<span class="string">'format'</span>], headers=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure></p><h2 id="数据库查询优化"><a href="#数据库查询优化" class="headerlink" title="数据库查询优化"></a>数据库查询优化</h2><h3 id="select-related函数"><a href="#select-related函数" class="headerlink" title="select_related函数"></a>select_related函数</h3><p>select_related是 <code>django.db.models.QuerySet</code> 类的一个方法，它解决了 ORM中常见的N+1查询效率问题，关于这一部分可以参考我之前写过的一篇文章<a href="/2017/07/11/django-select-related-performance/">《select_related函数性能基本测试》</a>。</p><h3 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h3><p>在更新记录时可以使用 update_fields 参数指定只需更新的字段列表。这个参数在只更新一两个字段的时候特别有用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">product.name = <span class="string">'Name changed again'</span></span><br><span class="line">product.save(update_fields=[<span class="string">'name'</span>])</span><br></pre></td></tr></table></figure><p>如果不指定参数的值，将更新所有字段。</p><h2 id="测试和部署"><a href="#测试和部署" class="headerlink" title="测试和部署"></a>测试和部署</h2><h3 id="分离配置文件"><a href="#分离配置文件" class="headerlink" title="分离配置文件"></a>分离配置文件</h3><p>Django使用 <code>settings</code> 模块配置相关参数，这使得其很好的区分开发/测试/生产。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- BillWorkingSystem</span><br><span class="line">    - BillWorkingSystem</span><br><span class="line">        - __init__.py</span><br><span class="line">        - settings.py</span><br><span class="line">        - test_settings.py</span><br><span class="line">        - urls.py</span><br><span class="line">        - wsgi.py</span><br></pre></td></tr></table></figure><p>一个简单的test_settings.py如下，可以配置一些仅用于测试的项目，如数据目录 FIXTURE_DIRS 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> BillWorkingSystem.settings <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DisableMigrations</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"notmigrations"</span></span><br><span class="line"></span><br><span class="line">MIGRATION_MODULES = DisableMigrations()</span><br><span class="line"></span><br><span class="line">FIXTURE_DIRS = (</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">'fixtures'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">UPLOAD_TEST_DATA_DIR = os.path.join(BASE_DIR, <span class="string">'fixtures'</span>, <span class="string">'test_data'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>)</span><br></pre></td></tr></table></figure><p><code>MIGRATION_MODULES</code> 设置表示是否运行数据迁移脚本。上述例子设置为空，表示测试无需运行这些迁移脚本。</p><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>单元测试主要测试那些返回为实际数据（如json/yaml）的视图。</p><p>测试采用标准的 <code>django.test.TestCase</code>，按照文档所描述的步骤，一步一步的编写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BillCreateTestCase</span><span class="params">(TestCaseBase)</span>:</span></span><br><span class="line">    url = <span class="string">'/api/bill/create/'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_success</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'enterprise'</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">'year'</span>: <span class="number">2017</span>,</span><br><span class="line">            <span class="string">'month'</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">'amount'</span>: <span class="number">4000</span>,</span><br><span class="line">            <span class="string">'create_name'</span>: <span class="string">'Test'</span></span><br><span class="line">        &#125;</span><br><span class="line">        rsp = self.client.post(self.url, data)</span><br><span class="line">        self.assertEqual(<span class="number">201</span>, rsp.status_code)</span><br><span class="line">        <span class="comment"># 其他assert语句</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_with_error_enterprise</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = &#123; &#125; <span class="comment"># 参数</span></span><br><span class="line">        rsp = self.client.post(self.url, data)</span><br><span class="line">        self.assertEqual(<span class="number">400</span>, rsp.status_code)</span><br><span class="line">        <span class="comment"># 其他assert语句</span></span><br></pre></td></tr></table></figure><p>一个基本模式，</p><ul><li>一个TestCase表示一个主要功能，如一个POST请求</li><li>每个 <code>test_FOO</code> 函数表示一种情况，包括正确和无效参数</li><li>依次对响应对象的状态码和内容、数据变更进行断言(Assert)测试</li></ul><h3 id="docker部署"><a href="#docker部署" class="headerlink" title="docker部署"></a>docker部署</h3><p>之前采用的是daocloud这个平台的工具。具体可参考<a href="https://kinegratii.github.io/2016/07/23/daocloud-django-deploy/">《使用DaoCloud部署Django项目》</a>这篇文章。由于对docker这方面没有一个完整的学习，加上daocloud.io更新到3版本，作了一些比较大的改变，后来就决定搬迁到阿里云服务器上，这样相对比较容易把握。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><h3 id="轮子"><a href="#轮子" class="headerlink" title="轮子"></a>轮子</h3><p>什么是轮子 wheel，写多了代码就会发现一些代码具有共同之处，将其抽象并提取，慢慢地就形成了一个库，可以和别人分享。本质上来说，Django也是一个轮子。</p><h3 id="持续开发"><a href="#持续开发" class="headerlink" title="持续开发"></a>持续开发</h3><p>由于是个人项目，因此一些版本升级方面就比较随意，基本上新版本出来就完全废弃旧有版本。</p><h3 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h3><p>稳定才是真，不要为追求标新立异而盲目升级。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;BWS项目是自己一年来在开发的项目。本文就项目中一些技术选型、功能实现、项目流程做一些简单的总结。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://kinegratii.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="项目" scheme="http://kinegratii.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="Django" scheme="http://kinegratii.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>驾考点滴</title>
    <link href="http://kinegratii.github.io/2017/07/28/driver-exam/"/>
    <id>http://kinegratii.github.io/2017/07/28/driver-exam/</id>
    <published>2017-07-28T12:13:12.000Z</published>
    <updated>2018-05-01T13:50:30.451Z</updated>
    
    <content type="html"><![CDATA[<p>驾考记录</p><a id="more"></a><p>今天考完了科目四，一切变得那么轻松了，坐等驾照快递上门。</p><p>（2017年8月17日）</p><hr><h2 id="科二"><a href="#科二" class="headerlink" title="科二"></a>科二</h2><p><strong>今天（28号），一起考四个全满贯。</strong></p><p>四个只有我是补考的，总结一下 “技术(30%) + 心态(60%) + 运气(10%)”。</p><p><strong>运气</strong></p><p>今天是1道1号，路线相对比较简单，道上的车比较少。在考试的时候异常地顺利，项目之间没有作什么停顿，(一个项目完成后可以停车空档，等前面的人做完或者自己休息思考一下)。</p><p><strong>技术</strong></p><p>的确经过依次挂科的经历，技术上有所提升，掌握的就比较平稳了。</p><ul><li>上车准备<ul><li>调整坐姿和后视镜。考场的车真是不能比，调了很久才稍微完成；</li><li>离合器下面榻了一块，需要用泡沫垫子垫一下；</li><li>还有要说的是，轮到号的时候车可能还没回到起点（报告合格的地方离起点还有一段距离），所以在上车之前可以大概问下前一个人这车性能如何，自己心里有个底。</li></ul></li><li>坡道停车和起步<ul><li><em>停车时右前轮距边缘线30厘米以上，扣10分;</em> 学车的时候教练说不要管右侧边线，一步留神，有可能是不合格，就不是扣10分这么简单了；</li><li>考场的车动力比较差，教练嘱咐可以加点油门，后来想想还是不加，让车乌龟慢慢爬上坡去。</li></ul></li><li>直角转弯<ul><li>在练习的一直掌握的比较好，主要是右侧对边线，上次考试前一天被拉了去练习十几分钟的对边线。</li><li>其次是打死方向盘的时机。</li></ul></li><li>侧方停车<ul><li>这个相对比较简单，进入的时候也是要对边线的，道理同直角转弯。</li><li>要注意的是车库由坡度和方向盘打死时会速度停顿下，所以要掌握离合器以便控制好车速。</li></ul></li><li>曲线行驶<ul><li>其实头是可以伸出窗外看看轮胎调整的，第一次考试的时候由于注意力不集中，忘了这一点，考试前几天，交管所通知说头不能伸出窗外；</li><li>基本上按照教练的，左侧铆钉和右侧喷水点沿着边线就可以了。</li></ul></li><li>倒车入库<ul><li>入库的时候，回正不够导致左侧空间比较大，后来还是有惊无险的完成入库了。</li><li>考试的标准通常是可以在一个范围，而教练要求是准确的一个点，按照教练的标准肯定又要训斥一顿了。]</li></ul></li><li>返回起点<ul><li>这时候就比较轻松了，稳稳当当开回起点就可以了。</li><li>小插曲1：经过公共车道的时候，发现前面的车在等最后的倒车入库，其中这时候靠左一点可以过去的，但为了保险起见就没有直接过去；</li><li>小插曲2：最后完全放开离合，汽车动力好像也不是很足，加点油门就可以了。</li></ul></li></ul><p><strong>心态</strong></p><p>心态很重要。</p><ul><li>要放轻松，需要有“大不了当去考场走一遭”，其实驾校的场地和练习一般都会比考试的时候更加难一点。</li><li>考试的时候注意力要集中，一共就那么十几分钟。上次考试（6月20日）第一把坡道起步熄火了，可以认为是技术不熟练；第二次在曲线行驶的时候，旁边另一道的人前几秒曲线行驶挂掉了，注意力不集中，过不了几秒自己也中枪了，压到右侧黄线了。哎，可惜已经没有机会了。</li></ul><hr><p>练车是一个很苦逼的过程，特别是考试前几天，基本上是天天练习，顶着三十七八度的大热天，人也超级多，一个早上下来也练不了几圈。</p><p>练车能认识各种各样的人，可以互相聊聊天，缓解练车过程的无趣。</p><p>周末台风又要来了，总算这炎热的天气会变凉快一些了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;驾考记录&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://kinegratii.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="驾考" scheme="http://kinegratii.github.io/tags/%E9%A9%BE%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>select_related函数性能基本测试</title>
    <link href="http://kinegratii.github.io/2017/07/11/django-select-related-performance/"/>
    <id>http://kinegratii.github.io/2017/07/11/django-select-related-performance/</id>
    <published>2017-07-11T02:50:58.000Z</published>
    <updated>2018-05-01T13:50:30.451Z</updated>
    
    <content type="html"><![CDATA[<p>缴费项目主体功能完成的差不多了，写前端JS写的都快吐了，把所有的通用的代码封装在一个文件里差不多有1500行。接下去应该主要是Bug修正和性能优化了。性能优化方面，数据库访问效率是重要的环节，使用ORM遇到的一个很常见的是 “N+1”问题，自然Django也不例外。</p><a id="more"></a><h2 id="N-1问题"><a href="#N-1问题" class="headerlink" title="N+1问题"></a>N+1问题</h2><p>以一个简单的例子说明。假设你有一个包含若干辆汽车(Car)的集合（数据库记录），每个车辆有若干个轮胎(wheel)。也就是说，汽车和轮胎是一个一对多的关系。</p><p>如果你需要，迭代出所有的汽车信息，并且对于每辆汽车打印它的轮胎信息。则可以使用以下SQL实现：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Car;</span><br></pre></td></tr></table></figure><p>然后对于每辆车，使用以下的SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> wheel <span class="keyword">WHERE</span> CarId = ?</span><br></pre></td></tr></table></figure><p>也就是说，在此过程中进行了N+1次数据库查询操作，其中N为汽车的数目。</p><p><strong>但是，另一种更为效率的方式</strong>，在查出所有车辆信息后，直接查询所有的轮胎的记录，在内存中查找之间的联系。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> wheel;</span><br></pre></td></tr></table></figure><blockquote><p>该例子来自于 <a href="https://stackoverflow.com/questions/97197/what-is-n1-select-query-issue" target="_blank" rel="noopener">https://stackoverflow.com/questions/97197/what-is-n1-select-query-issue</a> 。</p></blockquote><p>在Django中可以使用 <a href="https://docs.djangoproject.com/en/1.11/ref/models/querysets/#select-related" target="_blank" rel="noopener">select_related</a>和 <a href="https://docs.djangoproject.com/en/1.11/ref/models/querysets/#prefetch-related" target="_blank" rel="noopener">prefetch_related</a> 查询API解决这个问题。标准查询如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问数据库</span></span><br><span class="line">e = Entry.objects.get(id=<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 再次访问数据</span></span><br><span class="line">b = e.blog</span><br></pre></td></tr></table></figure><p>如果使用 select_related 函数后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问数据</span></span><br><span class="line">e = Entry.objects.select_related(<span class="string">'blog'</span>).get(id=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面语句不会访问数据库</span></span><br><span class="line">b = e.blog</span><br></pre></td></tr></table></figure><h2 id="表定义"><a href="#表定义" class="headerlink" title="表定义"></a>表定义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Organization</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    remark = models.TextField(max_length=<span class="number">500</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Enterprise</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">'名称'</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    catalog = models.CharField(verbose_name=<span class="string">'分类'</span>, max_length=<span class="number">10</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</span><br><span class="line">    address = models.CharField(verbose_name=<span class="string">'地址'</span>, max_length=<span class="number">100</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</span><br><span class="line">    organization = models.ForeignKey(Organization, on_delete=models.CASCADE, verbose_name=<span class="string">'组织'</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</span><br><span class="line">    remark = models.TextField(verbose_name=<span class="string">'备注'</span>, max_length=<span class="number">500</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</span><br><span class="line">    price = models.DecimalField(verbose_name=<span class="string">'单价'</span>, max_digits=<span class="number">15</span>, decimal_places=<span class="number">3</span>, default=<span class="number">0</span>)</span><br><span class="line">    unit = models.CharField(verbose_name=<span class="string">'单位'</span>, max_length=<span class="number">10</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</span><br><span class="line">    charge_type = models.CharField(verbose_name=<span class="string">'收费类型'</span>, max_length=<span class="number">10</span>, choices=ChargeType.choices)</span><br><span class="line"></span><br><span class="line">    objects = EnterpriseManager()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bill</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    enterprise = models.ForeignKey(Enterprise, verbose_name=<span class="string">'企业'</span>, on_delete=models.CASCADE)</span><br><span class="line">    year = models.IntegerField(verbose_name=<span class="string">'年份'</span>)</span><br><span class="line">    month = models.IntegerField(verbose_name=<span class="string">'月份'</span>)  <span class="comment"># month=0表示年度抄表</span></span><br><span class="line">    price = models.DecimalField(verbose_name=<span class="string">'单价'</span>, max_digits=<span class="number">15</span>, decimal_places=<span class="number">3</span>)</span><br><span class="line">    unit = models.CharField(verbose_name=<span class="string">'单位'</span>, max_length=<span class="number">10</span>)</span><br><span class="line">    amount = models.DecimalField(verbose_name=<span class="string">'用量'</span>, max_digits=<span class="number">15</span>, decimal_places=<span class="number">3</span>, default=<span class="number">0</span>)</span><br><span class="line">    total = models.DecimalField(verbose_name=<span class="string">'应收金额'</span>, max_digits=<span class="number">15</span>, decimal_places=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>数据库有 组织(Organization)、企业(Enterprise)和账单(Bill)三张表，它们的关系如下：</p><ul><li>每个企业可以隶属于一个组织，也可以不隶属于任何一个组织</li><li>每个企业可以有按年缴费和按月缴费两种缴费类型，使用charge_type区分</li><li>每个企业在同一月份或者同一年度（由缴费类型决定）只能有一条唯一的记录，该特性由业务层限制</li></ul><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><p>测试场景：获取所有账单数据，并且需要包括他们的企业基本信息，如名称、地址等。</p><p>测试是否使用 <code>select_related</code> 函数对查询耗时的影响。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_normal</span><span class="params">()</span>:</span></span><br><span class="line">    t1 = time.time()</span><br><span class="line">    el = []</span><br><span class="line">    bill_qs = models.Bill.objects.all()</span><br><span class="line">    <span class="keyword">for</span> bill <span class="keyword">in</span> bill_qs:</span><br><span class="line">        el.append(bill.enterprise)</span><br><span class="line">    t2 = time.time()</span><br><span class="line">    print(<span class="string">'Normal &#123;0&#125;'</span>.format(t2 - t1))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_select_related</span><span class="params">()</span>:</span></span><br><span class="line">    t1 = time.time()</span><br><span class="line">    el = []</span><br><span class="line">    bill_qs = models.Bill.objects.all().select_related(<span class="string">'enterprise'</span>)</span><br><span class="line">    <span class="keyword">for</span> bill <span class="keyword">in</span> bill_qs:</span><br><span class="line">        el.append(bill.enterprise)</span><br><span class="line">    t2 = time.time()</span><br><span class="line">    print(<span class="string">'Select &#123;0&#125;'</span>.format(t2 - t2))</span><br></pre></td></tr></table></figure><h2 id="规模定义"><a href="#规模定义" class="headerlink" title="规模定义"></a>规模定义</h2><p>假设 N 表示按年缴费和按月缴费的企业数目，即总企业数为 2N，则一年Bill账单总数为 12 x N + N = 13N，即测试代码中 <code>models.Bill.objects.all().count()</code> 返回的值。</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>以下是在Windows 10 64位 / Python3.5 / Django1.10.3 / 内存数据库 所测的数据：</p><table><thead><tr><th>N=</th><th>1</th><th>10</th><th>100</th><th>1000</th><th>10000</th></tr></thead><tbody><tr><td>Bill Total</td><td>13</td><td>130</td><td>1300</td><td>13000</td><td>130000</td></tr><tr><td>Normal</td><td>0.017008</td><td>0.157611</td><td>1.892831</td><td>16.585734</td><td>224.317318</td></tr><tr><td>Select</td><td>0.004504</td><td>0.027019</td><td>0.310722</td><td>2.259590</td><td>26.342256</td></tr><tr><td>相比</td><td>3.7744</td><td>5.8333</td><td>6.0917</td><td>7.3401</td><td>8.5154</td></tr></tbody></table><p>使用折线图描绘更为直观：</p><p><img src="/images/select_related_performance_chart.png" alt="性能测试图表"></p><p>从以上结果可以看成耗时差距随着规模增加越来越大，N大于1000时，两者耗时已不在一个数量级上了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;缴费项目主体功能完成的差不多了，写前端JS写的都快吐了，把所有的通用的代码封装在一个文件里差不多有1500行。接下去应该主要是Bug修正和性能优化了。性能优化方面，数据库访问效率是重要的环节，使用ORM遇到的一个很常见的是 “N+1”问题，自然Django也不例外。&lt;/p&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://kinegratii.github.io/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="Django" scheme="http://kinegratii.github.io/tags/Django/"/>
    
      <category term="测试" scheme="http://kinegratii.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>在树莓派安装lxml</title>
    <link href="http://kinegratii.github.io/2017/05/14/install-lxml-on-respberry-pi/"/>
    <id>http://kinegratii.github.io/2017/05/14/install-lxml-on-respberry-pi/</id>
    <published>2017-05-14T13:15:46.000Z</published>
    <updated>2018-05-01T13:50:30.451Z</updated>
    
    <content type="html"><![CDATA[<p>安装和配置是最令人费劲的：</p><ul><li>经常在解决一个问题过程又出现另外一个不得不先解决问题，有点像栈(stack)，忘记了最先要解决的问题</li><li>网上的解决方法只是一个参考，时间和环境不一定一样，需要自己去阐释</li><li>Google搜索/Bing搜索/stackoverflow是搜索的利器，错误信息一复制粘贴基本上可以找到一些结果，当然和搜索技巧也是有很大关系的</li></ul><p>本文记录在树莓派安装lxml的过出现的一些问题和解决方案，本来lxml安装过程比较简单，安装依赖和pip安装两条命令即可。但是由于各种各样的状况和环境导致这过程花费的时间有点长。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install libxml2-dev libxslt-dev python-dev</span><br><span class="line">$ sudo pip3 install lxml</span><br></pre></td></tr></table></figure><p><em>lxml的标准安装过程</em></p><a id="more"></a><h2 id="安装python3-6"><a href="#安装python3-6" class="headerlink" title="安装python3.6"></a>安装python3.6</h2><p>树莓派3默认安装的是python3.4，版本有点旧，决定自己安装python3.6，从官网下载源代码并自己编译，步骤如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.6.1/Python-3.6.1.tgz</span><br><span class="line">tar xvf Python-3.6.1.tgz</span><br><span class="line">cd Python-3.6.1</span><br><span class="line">./configure --enable-optimizations</span><br><span class="line">make</span><br><span class="line">sudo make altinstall</span><br><span class="line">python3.6</span><br></pre></td></tr></table></figure><p>安装完后python3.6路径为 <code>/usr/local/bin/python3.6</code>，另外使用软连接将python3指向3.6，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s -f /usr/local/bin/python3.6 /usr/local/bin/python3</span><br><span class="line">sudo ln -s -f /usr/local/bin/python3.6 /usr/bin/python3</span><br></pre></td></tr></table></figure><h2 id="问题-py3clean-permission-denied"><a href="#问题-py3clean-permission-denied" class="headerlink" title="问题: py3clean: permission denied"></a>问题: py3clean: permission denied</h2><p>由于安装python3.6没有完全配置好，导致使用apt-get安装任何包都会出现这个错误信息。从字面上是权限的问题，使用chmod命令或者root用户也无效。</p><p>后来定位并查看该执行文件的内容,发现是一个python脚本。问题出现在第一行的linux shabang符号，需要 将 <code>#! /usr/bin/python3</code> 改成 <code>#! /usr/local/bin/python3</code>，同时修改的还有同义目录下的py3compile脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ which py3clean</span><br><span class="line">/usr/bin/py3clean</span><br><span class="line">pi@raspberrypi:~ $ sudo nano /usr/bin/py3clean</span><br><span class="line">  GNU nano 2.2.6           File: /usr/bin/py3clean</span><br><span class="line"></span><br><span class="line">#! /usr/bin/python3</span><br></pre></td></tr></table></figure><h2 id="问题：找不到libxslt-dev"><a href="#问题：找不到libxslt-dev" class="headerlink" title="问题：找不到libxslt-dev"></a>问题：找不到libxslt-dev</h2><p>libxml2-dev包很快就安装成功了，但是libxslt-dev包却却提示找不到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ sudo apt-get install libxslt-devel</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree</span><br><span class="line">Reading state information... Done</span><br><span class="line">E: Unable to locate package libxslt-devel</span><br></pre></td></tr></table></figure><p>在Debian源找到了 libxslt-devel2 包页面，地址是 <a href="https://packages.debian.org/jessie/libxml2-dev" target="_blank" rel="noopener">https://packages.debian.org/jessie/libxml2-dev</a> ，按照页面提示添加apt源并安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">W: GPG error: http://ftp.cn.debian.org jessie Release: The following signatures couldn&apos;t be verified because the public key is not available: NO_PUBKEY 8B48AD6246925553 NO_PUBKEY 7638D0442B90D010 NO_PUBKEY CBF8D6FD518E17E1</span><br></pre></td></tr></table></figure><p>该消息显示这个源未经过验证，所以需要添加plublic key到系统中，如果显示 imported 1 字样就是导入成功了.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 8B48AD6246925553</span><br><span class="line">Executing: gpg --ignore-time-conflict --no-options --no-default-keyring --homedir /tmp/tmp.5TjGyQBYus --no-auto-check-trustdb --trust-model always --keyring /etc/apt/trusted.gpg --primary-keyring /etc/apt/trusted.gpg --keyserver keyserver.ubuntu.com --recv-keys 8B48AD6246925553</span><br><span class="line">gpg: requesting key 46925553 from hkp server keyserver.ubuntu.com</span><br><span class="line">gpg: key 46925553: public key &quot;Debian Archive Automatic Signing Key (7.0/wheezy) &lt;ftpmaster@debian.org&gt;&quot; imported</span><br><span class="line">gpg: Total number processed: 1</span><br><span class="line">gpg:               imported: 1  (RSA: 1)</span><br></pre></td></tr></table></figure><p>使用apt安装libxslt-dev。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ sudo apt install libxslt-dev</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree</span><br><span class="line">Reading state information... Done</span><br><span class="line">Note, selecting &apos;libxslt1-dev&apos; instead of &apos;libxslt-dev&apos;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>另外要说的是apt源如果连接不上，树莓派直接死机，使用局域网扫描工具没找到树莓派设备，这个问题也困扰了好几天，没找到直接的解决方法（比如跳过或者设置超时），最后直接注释。</p><h2 id="成功安装"><a href="#成功安装" class="headerlink" title="成功安装"></a>成功安装</h2><p>最后使用pip3安装，大功告成！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pi@raspberrypi:~ $ sudo pip3 install lxml</span><br><span class="line">Collecting lxml</span><br><span class="line">  Using cached lxml-3.7.3.tar.gz</span><br><span class="line">Building wheels for collected packages: lxml</span><br><span class="line">  Running setup.py bdist_wheel for lxml ... done</span><br><span class="line">  Stored in directory: /root/.cache/pip/wheels/df/32/5f/0acd510ac7d66ebe5f35155508972fa732ec45acd5f79146d2</span><br><span class="line">Successfully built lxml</span><br><span class="line">Installing collected packages: lxml</span><br><span class="line">Successfully installed lxml-3.7.3</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装和配置是最令人费劲的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;经常在解决一个问题过程又出现另外一个不得不先解决问题，有点像栈(stack)，忘记了最先要解决的问题&lt;/li&gt;
&lt;li&gt;网上的解决方法只是一个参考，时间和环境不一定一样，需要自己去阐释&lt;/li&gt;
&lt;li&gt;Google搜索/Bing搜索/stackoverflow是搜索的利器，错误信息一复制粘贴基本上可以找到一些结果，当然和搜索技巧也是有很大关系的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文记录在树莓派安装lxml的过出现的一些问题和解决方案，本来lxml安装过程比较简单，安装依赖和pip安装两条命令即可。但是由于各种各样的状况和环境导致这过程花费的时间有点长。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get install libxml2-dev libxslt-dev python-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo pip3 install lxml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;lxml的标准安装过程&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://kinegratii.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="树莓派" scheme="http://kinegratii.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="lxml" scheme="http://kinegratii.github.io/tags/lxml/"/>
    
      <category term="安装" scheme="http://kinegratii.github.io/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>高德地图热力图和设备监测</title>
    <link href="http://kinegratii.github.io/2017/04/29/amap-heatmap/"/>
    <id>http://kinegratii.github.io/2017/04/29/amap-heatmap/</id>
    <published>2017-04-29T10:42:05.000Z</published>
    <updated>2018-05-01T13:50:30.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-热力图"><a href="#A-热力图" class="headerlink" title="A 热力图"></a>A 热力图</h2><p>热力图以高亮形式显示数据密集程度。根据密集程度的不同，图上会呈现不同的颜色，以直观的形式展现数据密度。</p><p>在设备检测领域，采用热力图可以直观地显示哪些区域的设备具有很高的报警率，为监控决策和提前介入提供了数据依据。</p><p><a href="http://lbs.amap.com/api/javascript-api/reference/layer/#m_AMap.Heatmap" target="_blank" rel="noopener">AMap.Heatmap</a> 是高德地图热力图插件，基于<a href="https://www.patrick-wied.at/static/heatmapjs/" target="_blank" rel="noopener">heatmapjs</a>。高德地图API引用了heatmap.js最新版本v2.0，v2.0基于新的渲染模型，具有更高的渲染效率和更强的性能。支持chrome、firefox、safari、ie9及以上浏览器。</p><a id="more"></a><h2 id="B-后端数据API"><a href="#B-后端数据API" class="headerlink" title="B 后端数据API"></a>B 后端数据API</h2><p>根据热力图的文档，后端API需要返回的数据格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"device_serial"</span>: <span class="string">"F023D02900010002"</span>,</span><br><span class="line">        <span class="attr">"lng"</span>: <span class="number">119.368489</span>,</span><br><span class="line">        <span class="attr">"lat"</span>: <span class="number">25.729161</span>,</span><br><span class="line">        <span class="attr">"address"</span>: <span class="string">"XXX"</span>,</span><br><span class="line">        <span class="attr">"count"</span>: <span class="number">830</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"device_serial"</span>: <span class="string">"F023D02900010003"</span>,</span><br><span class="line">        <span class="attr">"lng"</span>: <span class="number">119.53378</span>,</span><br><span class="line">        <span class="attr">"lat"</span>: <span class="number">26.206372</span>,</span><br><span class="line">        <span class="attr">"address"</span>: <span class="string">"XXX"</span>,</span><br><span class="line">        <span class="attr">"count"</span>: <span class="number">220</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>总体为一个列表，每个元素表示一个设备，包括了设备序列号、设备经纬度、地址和报警数目。其中 <code>lng</code> 、 <code>lat</code> 和 <code>count</code> 是必要的数据，其他两个是可选的。</p><h2 id="C-页面布局设计"><a href="#C-页面布局设计" class="headerlink" title="C 页面布局设计"></a>C 页面布局设计</h2><p>页面布局包括两大部分：</p><ul><li>地图控件(div#id_map_container)，放置地图的控件，必须设置其高度。</li><li>时间选择器， 使用 <code>position: absolute;z-index: 2;</code>等样式，将时间段选择控件(div#id_time_radio_panel)以绝对定位方式放置在地图控件的右上角。</li></ul><p>最外层使用Bootstrap Panel作为容器，并实现了折叠(collapse)效果。</p><blockquote><p>时间选择器只提供了 “最近一年”和“全部”两个时段，时间段太短数据量偏少，不具有很好的代表性。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">strong</span>&gt;</span>报警区域分布图<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"id_map_container"</span> <span class="attr">style</span>=<span class="string">"height: 655px;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>  <span class="attr">id</span>=<span class="string">"id_time_radio_panel"</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">style</span>=<span class="string">"position: absolute;width:23%;z-index: 2;top:5px;right: 5px;"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">href</span>=<span class="string">"#id_time_radio"</span>&gt;</span>时间段设置<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"id_time_radio"</span> <span class="attr">class</span>=<span class="string">"collapse in"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"timeDelta"</span> <span class="attr">value</span>=<span class="string">"365d"</span> <span class="attr">checked</span>/&gt;</span>最近一年&amp;nbsp;</span><br><span class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"timeDelta"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span>全部时间</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="D-js实现"><a href="#D-js实现" class="headerlink" title="D js实现"></a>D js实现</h2><p>主要步骤如下：</p><ol><li>首先引入高德地图js库文件，使用注册好的API KEY。</li><li>通过 <code>isSupportCanvas</code> 判断是否支持canvas，否则提示相关信息。</li><li>创建地图对象，并初始化工具插件。</li><li>编写时间选择器切换响应函数，在函数中请求远程数据，并渲染热力图层。</li><li><code>setDataSet</code> 除了数据链表外，还需要设置热力图数值最大最小值。</li><li>渲染完成后将地图移动到数值最大的点上。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadHeatmapData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> heatmap;</span><br><span class="line">    $.get(<span class="string">'/api/alarm/heatmap/?timeDelta='</span> + $(<span class="string">"input[name=timeDelta]:checked"</span>).val(), <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        gMapObj.plugin([<span class="string">"AMap.Heatmap"</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//初始化heatmap对象</span></span><br><span class="line">            heatmap = <span class="keyword">new</span> AMap.Heatmap(gMapObj, &#123;</span><br><span class="line">                radius: <span class="number">20</span>,</span><br><span class="line">                opacity: [<span class="number">0</span>, <span class="number">0.8</span>]</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">var</span> maxVal = <span class="number">0</span>, minVal = <span class="number">10000</span>;</span><br><span class="line">            <span class="keyword">var</span> cIndex = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (data[i].count &gt; maxVal) &#123;</span><br><span class="line">                    maxVal = data[i].count;</span><br><span class="line">                    cIndex = i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (data[i].count &lt; minVal) &#123;</span><br><span class="line">                    minVal = data[i].count;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            heatmap.setDataSet(&#123;</span><br><span class="line">                data: data,</span><br><span class="line">                max: maxVal,</span><br><span class="line">                min: minVal</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (cIndex &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">                gMapObj.setCenter(<span class="keyword">new</span> AMap.LngLat(data[cIndex].lng, data[cIndex].lat));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isSupportCanvas</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> elem = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line">    <span class="keyword">return</span> !!(elem.getContext &amp;&amp; elem.getContext(<span class="string">'2d'</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> gMapObj = <span class="keyword">new</span> AMap.Map(<span class="string">"id_map_container"</span>, &#123;</span><br><span class="line">    zoom: <span class="number">15</span></span><br><span class="line">&#125;);</span><br><span class="line">AMap.plugin([<span class="string">'AMap.ToolBar'</span>, <span class="string">'AMap.Scale'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gMapObj.addControl(<span class="keyword">new</span> AMap.ToolBar());</span><br><span class="line">    gMapObj.addControl(<span class="keyword">new</span> AMap.Scale());</span><br><span class="line">    gMapObj.addControl(<span class="keyword">new</span> AMap.OverView());</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span> (!isSupportCanvas()) &#123;</span><br><span class="line">    alert(<span class="string">"'热力图仅对支持canvas的浏览器适用,您所使用的浏览器不能使用热力图功能,请换个浏览器试试"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    loadHeatmapData();</span><br><span class="line">    $(<span class="string">":radio"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        loadHeatmapData();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-示例"><a href="#E-示例" class="headerlink" title="E 示例"></a>E 示例</h2><p>这是系统经过一个月运行后生成的热力图，虽然数据量还是偏少，但设备之间还是有很好的区分度，比如国惠大酒店旁的设备报警次数就比其他多了几个等级。</p><p><img src="/images/amap-heatmap.png" alt="amap-heatmap"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;A-热力图&quot;&gt;&lt;a href=&quot;#A-热力图&quot; class=&quot;headerlink&quot; title=&quot;A 热力图&quot;&gt;&lt;/a&gt;A 热力图&lt;/h2&gt;&lt;p&gt;热力图以高亮形式显示数据密集程度。根据密集程度的不同，图上会呈现不同的颜色，以直观的形式展现数据密度。&lt;/p&gt;
&lt;p&gt;在设备检测领域，采用热力图可以直观地显示哪些区域的设备具有很高的报警率，为监控决策和提前介入提供了数据依据。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://lbs.amap.com/api/javascript-api/reference/layer/#m_AMap.Heatmap&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AMap.Heatmap&lt;/a&gt; 是高德地图热力图插件，基于&lt;a href=&quot;https://www.patrick-wied.at/static/heatmapjs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;heatmapjs&lt;/a&gt;。高德地图API引用了heatmap.js最新版本v2.0，v2.0基于新的渲染模型，具有更高的渲染效率和更强的性能。支持chrome、firefox、safari、ie9及以上浏览器。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://kinegratii.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="数据可视化" scheme="http://kinegratii.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="Javascript" scheme="http://kinegratii.github.io/tags/Javascript/"/>
    
      <category term="高德地图" scheme="http://kinegratii.github.io/tags/%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>python项目持续集成与包发布</title>
    <link href="http://kinegratii.github.io/2017/04/25/python-project-ci-publish/"/>
    <id>http://kinegratii.github.io/2017/04/25/python-project-ci-publish/</id>
    <published>2017-04-25T10:11:18.000Z</published>
    <updated>2018-05-01T13:50:30.451Z</updated>
    
    <content type="html"><![CDATA[<p>本文依据<a href="https://packaging.python.org/" target="_blank" rel="noopener">《Python Packaging User Guide (Python打包用户手册)》</a>，以 <a href="https://github.com/kinegratii/ConfStruct" target="_blank" rel="noopener">ConfStruct</a> 为例子描述了Python项目的持续集成和包发布等开发流程，并了解 Travis CI、wheel和twine等工具的使用。</p><blockquote><p>ConfStruct是一个使用类似ORM声明式描述特定场景下的协议数据结构，并提供Python对象和二进制数据之间的转化的Python库。该库解决了使用若干个“类型-长度-值”无序二进制片段传输字典的问题。</p></blockquote><p>主要步骤</p><ul><li>准备项目代码</li><li>运行本地单元测试</li><li>Travis持续集成</li><li>编写setup.py文件</li><li>生成wheel安装包</li><li>发布到PyPI</li><li>添加徽章</li></ul><a id="more"></a><h2 id="1-准备项目代码"><a href="#1-准备项目代码" class="headerlink" title="1 准备项目代码"></a>1 准备项目代码</h2><p>首先准备好项目代码和文本，包括：</p><ul><li>源代码</li><li>完全通过的测试用例代码</li><li>requirements.txt依赖文件</li><li>.gitignore文件</li><li>[可选] README文件</li><li>[可选] 开源协议文件</li></ul><h2 id="2-运行本地单元测试"><a href="#2-运行本地单元测试" class="headerlink" title="2 运行本地单元测试"></a>2 运行本地单元测试</h2><p>依据开发规范，测试代码放置在tests包下，每个测试文件以test_开头。Python的测试框架有：</p><ul><li><a href="https://docs.python.org/3/library/unittest.html" target="_blank" rel="noopener">unittest</a></li><li><a href="http://pytest.org/" target="_blank" rel="noopener">pytest</a></li><li><a href="https://nose.readthedocs.io/en/latest/" target="_blank" rel="noopener">nose</a></li><li><a href="https://tox.readthedocs.io/en/latest/" target="_blank" rel="noopener">tox</a></li></ul><p>本博客使用的是最简单自带的unittest。执行以下命令以运行测试用例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m unittest discover</span><br></pre></td></tr></table></figure><p>结果如下，完全测试通过。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">E:\projects\ConfStruct&gt;python -m unittest discover</span><br><span class="line">.......</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 7 tests in 0.002s</span><br><span class="line"></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h2 id="3-Travis持续集成"><a href="#3-Travis持续集成" class="headerlink" title="3 Travis持续集成"></a>3 Travis持续集成</h2><p>Travis是一个在线持续集成的平台，支持github登录。</p><p>第一步，在项目根目录下创建 .travis.yaml文件，写入相关配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">python</span></span><br><span class="line"><span class="attr">python:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"2.7"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"3.4"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"3.5"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"3.6"</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">pip</span> <span class="string">install</span> <span class="bullet">-r</span> <span class="string">requirements_dev.txt</span></span><br><span class="line"><span class="attr">script:</span> <span class="string">python</span> <span class="bullet">-m</span> <span class="string">unittest</span></span><br></pre></td></tr></table></figure><p>该.travis.yaml文件表明ConfStruct项目需在python2.7和python3.4+环境下使用unittest进行单元测试，测试环境使用不同的依赖文件requirements_dev.txt。</p><p>第二步，在github创建一个空项目。并使用github登录Travis,打开这个项目的自动构建开关，每当有新的push或者PR时就会自动触发，并给出是否构建成功的消息。</p><p>第三步，使用git将本地代码上传到github，过一两分钟后可在Travis查看相关构建信息，下面是构建成功的结果：</p><p><img src="/images/travis-build-success.png" alt="travis-build-success"></p><h2 id="4-编写setup-py文件"><a href="#4-编写setup-py文件" class="headerlink" title="4 编写setup.py文件"></a>4 编写setup.py文件</h2><p>使用 setuptools来分发写好的模块。在项目目录下新建一个setup.py，主要内容类似如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">from __future__ import unicode_literals</span><br><span class="line"></span><br><span class="line">from setuptools import setup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lib_classifiers = [</span><br><span class="line">    &quot;Development Status :: 4 - Beta&quot;,</span><br><span class="line">    &quot;Programming Language :: Python :: 2&quot;,</span><br><span class="line">    &quot;Programming Language :: Python :: 2.7&quot;,</span><br><span class="line">    &quot;Programming Language :: Python :: 3&quot;,</span><br><span class="line">    &quot;Programming Language :: Python :: 3.4&quot;,</span><br><span class="line">    &quot;Programming Language :: Python :: 3.5&quot;,</span><br><span class="line">    &quot;Programming Language :: Python :: 3.6&quot;,</span><br><span class="line">    &quot;Intended Audience :: Developers&quot;,</span><br><span class="line">    &quot;License :: OSI Approved :: MIT License&quot;,</span><br><span class="line">    &quot;Topic :: Software Development :: Libraries&quot;,</span><br><span class="line">    &quot;Topic :: Utilities&quot;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">setup(name=&quot;ConfStruct&quot;,</span><br><span class="line">      version=&apos;0.5.0&apos;,</span><br><span class="line">      author=&quot;kinegratii&quot;,</span><br><span class="line">      author_email=&quot;kinegratii@gmail.com&quot;,</span><br><span class="line">      url=&quot;https://github.com/kinegratii/ConfStruct&quot;,</span><br><span class="line">      keywords=&quot;struct binary pack unpack&quot;,</span><br><span class="line">      py_modules=[&quot;conf_struct&quot;],</span><br><span class="line">      install_requires=[&apos;six&apos;],</span><br><span class="line">      description=&quot;A parser and builder between python objects and binary data for configure parameters.&quot;,</span><br><span class="line">      license=&quot;MIT&quot;,</span><br><span class="line">      classifiers=lib_classifiers</span><br><span class="line">      )</span><br></pre></td></tr></table></figure><p><code>setuptools.setup</code> 函数，它描述了项目的一些基本信息，主要参数如下表</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>名称，PyPI的唯一标识，不能与已有的冲突。</td></tr><tr><td>version</td><td>版本字符串，可以使用常量或者从库的 <code>__VERSION__</code> 导入。</td></tr><tr><td>author</td><td>作者</td></tr><tr><td>author_email</td><td>邮箱</td></tr><tr><td>url</td><td>项目主页</td></tr><tr><td>py_modules</td><td>源代码模块</td></tr><tr><td>install_requires</td><td>安装依赖，格式与requirements.txt相同</td></tr><tr><td>license</td><td>开源协议类型，如 MIT</td></tr><tr><td>lib_classifiers</td><td>分类标签，设置Python版本支持、操作系统支持、面向开发者或使用者、软件分类等信息。可用的选项在<a href="https://pypi.python.org/pypi?:action=list_classifiers" target="_blank" rel="noopener">这里</a> 可以找到</td></tr></tbody></table><h2 id="5-生成wheel安装包"><a href="#5-生成wheel安装包" class="headerlink" title="5 生成wheel安装包"></a>5 生成wheel安装包</h2><p><a href="http://pythonwheels.com/" target="_blank" rel="noopener">wheel</a> 实际上是一个zip压缩包，是Python最新标准分发格式，用于替代eggs。和源代码编译相比，安装wheel无需经过 <em>构建</em> 这个流程，对于终端使用用户来说速度有了实质上的提升。</p><p>在使用之前需要安装相关包，运行命令 <code>pip install wheel</code> 即可。</p><p>wheel包按照是否纯Python包和23兼容性可分为三种，每种包所需运行的命令和生成的文件名称也有所不同。</p><ul><li>Universal Wheels：纯Python，无C扩展；直接(natively)支持Python2和Python3，通常会使用 <code>six</code> 、<code>futures</code>等兼容库或者 <code>__future__</code> 模块。</li><li>Pure Python Wheels：纯Python，无C扩展；无法直接支持Python2和Python3，需要通过 2to3 工具转化</li><li>Platform Wheels：针对特定的平台模块，通常是因为需要包含已编译的扩展。</li></ul><p>除了第一种Universal Wheels使用以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py bdist_wheel --universal</span><br></pre></td></tr></table></figure><p>而 Pure Python Wheels 和 Platform Wheels无需添加 <code>--universal</code> 选项，该命令会检测是否是纯Python包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py bdist_wheel</span><br></pre></td></tr></table></figure><p>在这里要发布的是 Universal Wheels，需要添加 <code>--universal</code> 选项。</p><p>运行后在dist目录下多了个 ConfStruct-0.5.0-py2.py3-none-any.whl 安装包，使用pip install 命令即可安装成功。根据 <a href="https://www.python.org/dev/peps/pep-0425/" target="_blank" rel="noopener">PEP425</a> 该安装包文件名遵守这样的规定：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;distribution&#125;-&#123;version&#125;(-&#123;build tag&#125;)?-&#123;python tag&#125;-&#123;abi tag&#125;-&#123;platform tag&#125;.whl</span><br></pre></td></tr></table></figure><h2 id="6-发布到PyPI"><a href="#6-发布到PyPI" class="headerlink" title="6 发布到PyPI"></a>6 发布到PyPI</h2><p>PyPI目前有两个可用的网址:</p><ul><li>旧版 PyPI <a href="https://pypi.python.org/pypi" target="_blank" rel="noopener">https://pypi.python.org/pypi</a></li><li>新版 Warehouse  <a href="https://pypi.org/" target="_blank" rel="noopener">https://pypi.org/</a>。Warehouse目前还处于开发状态(pre-production developement)，可以显示项目页面，但是页面内容简单，很多链接还是处于不可用状态。</li></ul><p><a href="https://pypi.python.org/pypi/twine" target="_blank" rel="noopener">twine</a> 是一个专门用于发布项目到PyPI的工具，可以使用 <code>pip install twine</code> 来安装，它的主要优点：</p><ul><li>安全的HTTPS传输</li><li>上传过程中不要求执行setup.py脚本</li><li>上传已经存在的文件，支持在发布前进行分发测试</li><li>支持任意包格式，包括wheel</li></ul><p><strong>最新版本的twine无需注册这一步骤，可直接上传</strong>，执行命令 <code>twine register</code> 将显示 <code>HTTPError: 410 Client Error: This API is no longer supported, instead simply upload the file. for url: https://upload.pypi.org/legacy/</code>的错</p><p>上传命令如下，在此过程中可能需要输入PyPI的用户名和密码，当然也可以使用 <code>.pypirc</code> 文件来避免多次输入。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">twine upload dist/*</span><br><span class="line">Uploading distributions to https://upload.pypi.org/legacy/</span><br><span class="line">Enter your username: kinegratii</span><br><span class="line">Enter your password:</span><br><span class="line">Uploading ConfStruct-0.5.0-py2.py3-none-any.whl</span><br><span class="line">[================================] 4259/4259 - 00:00:08</span><br></pre></td></tr></table></figure><p>当上传新版本时，最好指定新版本的安装包文件，如 <code>twine upload dist/ConfStruct-0.6.0-py2.py3-none-any.whl</code>，否则会出现文件已存在的错误。</p><h2 id="7-添加徽章"><a href="#7-添加徽章" class="headerlink" title="7 添加徽章"></a>7 添加徽章</h2><p>在 <a href="https://badge.fury.io" target="_blank" rel="noopener">https://badge.fury.io</a> 中输入项目名称并查找，把markdown格式复制到README.md文件。</p><p>点击Travis控制台build pass 图片并复制图片链接到README.md。如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![travis](https://travis-ci.org/kinegratii/ConfStruct.svg?branch=master)</span><br><span class="line">[![PyPI version](https://badge.fury.io/py/ConfStruct.svg)](https://badge.fury.io/py/ConfStruct)</span><br></pre></td></tr></table></figure><p>效果图</p><p><img src="https://travis-ci.org/kinegratii/ConfStruct.svg?branch=master" alt="travis"><br><img src="https://badge.fury.io/py/ConfStruct.svg" alt="PyPI version"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文依据&lt;a href=&quot;https://packaging.python.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Python Packaging User Guide (Python打包用户手册)》&lt;/a&gt;，以 &lt;a href=&quot;https://github.com/kinegratii/ConfStruct&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ConfStruct&lt;/a&gt; 为例子描述了Python项目的持续集成和包发布等开发流程，并了解 Travis CI、wheel和twine等工具的使用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ConfStruct是一个使用类似ORM声明式描述特定场景下的协议数据结构，并提供Python对象和二进制数据之间的转化的Python库。该库解决了使用若干个“类型-长度-值”无序二进制片段传输字典的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;主要步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;准备项目代码&lt;/li&gt;
&lt;li&gt;运行本地单元测试&lt;/li&gt;
&lt;li&gt;Travis持续集成&lt;/li&gt;
&lt;li&gt;编写setup.py文件&lt;/li&gt;
&lt;li&gt;生成wheel安装包&lt;/li&gt;
&lt;li&gt;发布到PyPI&lt;/li&gt;
&lt;li&gt;添加徽章&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://kinegratii.github.io/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="Python" scheme="http://kinegratii.github.io/tags/Python/"/>
    
      <category term="测试" scheme="http://kinegratii.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="构建" scheme="http://kinegratii.github.io/tags/%E6%9E%84%E5%BB%BA/"/>
    
      <category term="PyPI" scheme="http://kinegratii.github.io/tags/PyPI/"/>
    
      <category term="持续集成" scheme="http://kinegratii.github.io/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>Construct：二进制数据解析器和构建器</title>
    <link href="http://kinegratii.github.io/2017/04/07/construct-python-binary-parse-build/"/>
    <id>http://kinegratii.github.io/2017/04/07/construct-python-binary-parse-build/</id>
    <published>2017-04-07T01:30:11.000Z</published>
    <updated>2018-05-01T13:50:30.451Z</updated>
    
    <content type="html"><![CDATA[<p>Construct是一个强大的二进制数据解析和构建Python库，适用于建立大型复杂应用程序的通信协议，类似于二进制数据的ORM库。</p><h2 id="1-标准库struct"><a href="#1-标准库struct" class="headerlink" title="1 标准库struct"></a>1 标准库struct</h2><p>struct是用于二进制数据的解析和构建，处理Python对象和二进制数据之间的转化。它的API非常简单：</p><ul><li><code>stricut.pack(fmt, v1, v2, *)</code> 打包，Python对象到二进制数据</li><li><code>struct.unpack(fmt, buffer)</code> 解包，二进制数据到Python对象</li><li><code>struct.calcsize(fmt)</code> 计算格式字符串数据大小</li></ul><a id="more"></a><h2 id="2-Construct库"><a href="#2-Construct库" class="headerlink" title="2 Construct库"></a>2 Construct库</h2><p>在开发大型应用程序中，比如实现NMS协议，直接使用 <code>struct</code> 模块需要写大量的代码。和数据库访问库相类比， <code>struct</code> 相当于 <code>mysql-python</code> 底层连接的角色。</p><table><thead><tr><th>-</th><th>二进制数据</th><th>数据库访问</th></tr></thead><tbody><tr><td>ORM</td><td>?</td><td>Django ORM / sqlalchemy</td></tr><tr><td>Connection</td><td>struct</td><td>mysql-python / pysycopg2</td></tr></tbody></table><p>在 <a href="https://pypi.python.org/pypi" target="_blank" rel="noopener">Pypi</a> 使用 “struct + binary” 搜索相关Python库，比较后，Construct是比较合适：</p><ul><li>github star数目为287</li><li>开发活跃，最新发布版本是2.8.11，时间2017-04-05。</li><li>支持Python3.6。</li><li>文档完备。</li></ul><p>按照文档要求下载、安装、测试，基本上符合大部分需求。</p><p><strong>声明式定义</strong></p><p>使用 Struct 类定义数据结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; format = Struct(</span><br><span class="line">...     &quot;signature&quot; / Const(b&quot;BMP&quot;),</span><br><span class="line">...     &quot;width&quot; / Int8ub,</span><br><span class="line">...     &quot;height&quot; / Int8ub,</span><br><span class="line">...     &quot;pixels&quot; / Array(this.width * this.height, Byte),</span><br><span class="line">... )</span><br><span class="line">&gt;&gt;&gt; format.build(dict(width=3,height=2,pixels=[7,8,9,11,12,13]))</span><br><span class="line">b&apos;BMP\x03\x02\x07\x08\t\x0b\x0c\r&apos;</span><br><span class="line">&gt;&gt;&gt; format.parse(b&apos;BMP\x03\x02\x07\x08\t\x0b\x0c\r&apos;)</span><br><span class="line">Container(signature=b&apos;BMP&apos;)(width=3)(height=2)(pixels=[7, 8, 9, 11, 12, 13])</span><br></pre></td></tr></table></figure><p><strong>组合和继承</strong></p><p>Construct 支持原子结构和自定义结构的组合。使用 Adapter 自定义，下面为4字节存储IPv4数据的解决方案。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class IpAddressAdapter(Adapter):</span><br><span class="line">...     def _encode(self, obj, context):</span><br><span class="line">...         return list(map(int, obj.split(&quot;.&quot;)))</span><br><span class="line">...     def _decode(self, obj, context):</span><br><span class="line">...         return &quot;&#123;0&#125;.&#123;1&#125;.&#123;2&#125;.&#123;3&#125;&quot;.format(*obj)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; IpAddress = IpAddressAdapter(Byte[4])</span><br></pre></td></tr></table></figure><p>使用方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; IpAddress.parse(b&quot;\x01\x02\x03\x04&quot;)</span><br><span class="line">&apos;1.2.3.4&apos;</span><br><span class="line">&gt;&gt;&gt; IpAddress.build(&quot;192.168.2.3&quot;)</span><br><span class="line">b&apos;\xc0\xa8\x02\x03&apos;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Construct是一个强大的二进制数据解析和构建Python库，适用于建立大型复杂应用程序的通信协议，类似于二进制数据的ORM库。&lt;/p&gt;
&lt;h2 id=&quot;1-标准库struct&quot;&gt;&lt;a href=&quot;#1-标准库struct&quot; class=&quot;headerlink&quot; title=&quot;1 标准库struct&quot;&gt;&lt;/a&gt;1 标准库struct&lt;/h2&gt;&lt;p&gt;struct是用于二进制数据的解析和构建，处理Python对象和二进制数据之间的转化。它的API非常简单：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stricut.pack(fmt, v1, v2, *)&lt;/code&gt; 打包，Python对象到二进制数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;struct.unpack(fmt, buffer)&lt;/code&gt; 解包，二进制数据到Python对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;struct.calcsize(fmt)&lt;/code&gt; 计算格式字符串数据大小&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://kinegratii.github.io/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="Python" scheme="http://kinegratii.github.io/tags/Python/"/>
    
      <category term="ORM" scheme="http://kinegratii.github.io/tags/ORM/"/>
    
      <category term="软件" scheme="http://kinegratii.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>NMS协议包识别引擎</title>
    <link href="http://kinegratii.github.io/2017/04/02/the-design-of-packet-identify-engine/"/>
    <id>http://kinegratii.github.io/2017/04/02/the-design-of-packet-identify-engine/</id>
    <published>2017-04-02T07:33:14.000Z</published>
    <updated>2018-05-01T13:50:30.451Z</updated>
    
    <content type="html"><![CDATA[<p>基于工厂模式的包识别引擎设计，和一般工厂模式不同是：</p><ul><li>匹配规则查询表中是一个树形结构，既有精确规则，又有模糊规则，匹配的过程需要多次查询的操作，从精确到模糊直至无法匹配。</li><li>匹配规则查询表能够支持添加新规则操作</li></ul><h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1 问题描述"></a>1 问题描述</h2><p><strong>A NMS基础协议</strong></p><p>NMS是服务器与硬件设备(具体为RTU或者网关)工作的通信协议，协议格式描述如下：</p><table><thead><tr><th>网关地址</th><th>节点地址</th><th>源类型</th><th>包序号</th><th>包类型</th><th>负载长度</th><th>负载</th></tr></thead><tbody><tr><td>gateway_mac</td><td>rtu_mac</td><td>source_type</td><td>packet_id</td><td>packet_type</td><td>payload_length</td><td>payload</td></tr><tr><td>8</td><td>8</td><td>1</td><td>4</td><td>1</td><td>1</td><td>-</td></tr></tbody></table><p>前23字节为包头部，各个字段描述如下：</p><ul><li>网关地址：64位长整型，显示为十六进制形式。</li><li>节点地址：64位长整型，显示为十六进制形式。</li><li>源类型：表示哪一种设备，主要有 Gateway/GPRS-RTU/Mesh-RTU 三种类型的设备。</li><li>包序号：32位整数，0 - 4294967295 。</li><li>包类型：该包的类型。</li><li>负载长度：整数0-255，表示后面的负载长度，实际中负载长度小于255。</li></ul><a id="more"></a><p>源类型取值定义如下：</p><table><thead><tr><th>设备分类</th><th>设备类型取值</th><th>描述</th></tr></thead><tbody><tr><td>网关</td><td>0x03</td><td>自组网网关</td></tr><tr><td></td><td>0x06</td><td>以太网网关</td></tr><tr><td>Mesh-RTU</td><td>0x01</td><td>自组网RTU，通过自组网关与服务器相连</td></tr><tr><td>GPRS-RTU</td><td>0x02</td><td>GPRS-RTU，与服务器直连</td></tr><tr><td>web服务器</td><td>0x04</td><td>由服务器或者上层应用发起</td></tr></tbody></table><p><strong>B 应用协议</strong></p><p>NMS可承载多种设备应用协议，比如Modbus协议、DTU低功耗设备协议、远程抄表协议等，每个应用协议使用1字节的整数标识，称之为应用类型(app_id)。<strong>由于一些类型的包与上层应用无关，所以在设计中，NMS协议头部没有专门的应用类型字段。</strong> 它的规则如下：</p><ul><li>应用类型存储在payload中，并且位置不一定相同，但由包类型决定，即由packet_type和payload两个参数可计算出具体应用类型数值</li><li>在应用协议扩展过程中，属于统一应用协议的设备（网关或节点）既可以使用现有的设备类型取值，也可申请新的设备类型取值。这取决于具体应用场景，比如Modbus协议中，网关设备只起数据转化的功能，可以部署通用网关，设备类型取值为0x03，远程抄表协议中，网关也能响应服务器的动作，申请新的设备类型取值。</li></ul><p>在上述描述中，设备类型(source_type)和设备分类(source_catalog)的概念是不一样的。加入上层应用协议后，它们的关系，</p><table><thead><tr><th>设备分类</th><th>设备分类取值</th><th>设备类型取值</th><th>应用协议</th><th>描述</th></tr></thead><tbody><tr><td>网关</td><td>gateway</td><td>0x03</td><td>通用</td><td>自组网网关</td></tr><tr><td></td><td></td><td>0x06</td><td>通用</td><td>以太网网关</td></tr><tr><td></td><td></td><td>0x07</td><td>抄表应用(0x01)</td><td>网关</td></tr><tr><td></td><td></td><td>…</td><td>…</td><td>…</td></tr><tr><td>Mesh-RTU</td><td>mesh_rtu</td><td>0x01</td><td>通用</td><td>自组网RTU，通过自组网关与服务器相连</td></tr><tr><td>GPRS-RTU</td><td>gprs_rtu</td><td>0x02</td><td>通用</td><td>GPRS-RTU，与服务器直连</td></tr><tr><td></td><td></td><td>0x08</td><td>报警(0x0A)</td><td></td></tr><tr><td></td><td></td><td>…</td><td>…</td><td>…</td></tr><tr><td>web服务器</td><td>-</td><td>0x04</td><td>-</td><td>由服务器或者上层应用发起</td></tr></tbody></table><p>以具体到NMS协议， 包类型与应用类型的对应关系（部分）如下：</p><table><thead><tr><th>包类型</th><th>取值</th><th>是否应用协议相关</th><th>是否设备相关</th><th>描述</th></tr></thead><tbody><tr><td>数据包</td><td>0x01</td><td>是</td><td>无</td><td>设备自动上报的数据</td></tr><tr><td>心跳包</td><td>0x04</td><td>否</td><td>设备分类相关</td><td>维持在线状态</td></tr><tr><td>时间同步包</td><td>0x06</td><td>否</td><td>否</td><td>由服务器发送</td></tr></tbody></table><p>问题：</p><ol><li>设计基于树结构的包结构体系。</li><li>实现给定一段符合格式NMS的包二进制字节数组，识别所对应的包种类，返回实例化的包对象。</li><li>支持扩展已有的应用协议。</li></ol><h2 id="2-基本识别过程"><a href="#2-基本识别过程" class="headerlink" title="2 基本识别过程"></a>2 基本识别过程</h2><p>基于(packet_type, source_type, app_id)的识别引擎主框架代码如下。</p><p>packet.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PacketBase</span><span class="params">(object)</span>:</span></span><br><span class="line">    packet_type = <span class="keyword">None</span></span><br><span class="line">    source_catalog = <span class="keyword">None</span></span><br><span class="line">    source_type = <span class="keyword">None</span></span><br><span class="line">    app_related = <span class="keyword">False</span></span><br><span class="line">    app_id = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, gateway_mac, rtu_mac, source_type, packet_id, packet_type, payload_length, payload, **kwargs)</span>:</span></span><br><span class="line">        self.gateway_mac = gateway_mac</span><br><span class="line">        self.rtu_mac = rtu_mac</span><br><span class="line">        self.source_type = source_type <span class="keyword">or</span> self.source_type</span><br><span class="line">        self.packet_id = packet_id</span><br><span class="line">        self.packet_type = packet_type <span class="keyword">or</span> self.packet_type</span><br><span class="line">        self.payload_length = payload_length</span><br><span class="line">        self.payload = payload</span><br></pre></td></tr></table></figure><p>engine.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppProtocolBase</span><span class="params">(object)</span>:</span></span><br><span class="line">    app_id = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Engine</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._packet_lookup = &#123;&#125; <span class="comment"># 包类对象查询表，为(packet_type, source_type, app_id)到包类对象的映射</span></span><br><span class="line">        self._protocol_lookup = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">register_protocol</span><span class="params">(self, protocol_class)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_lookup_item</span><span class="params">(self, packet_type, source_catalog, source_type, app_id, packet_class)</span>:</span></span><br><span class="line">        <span class="comment"># 添加匹配规则</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">identify</span><span class="params">(self, packet_binary)</span>:</span></span><br><span class="line">        header, payload = packet_binary[:<span class="number">23</span>], packet_binary[<span class="number">23</span>:]</span><br><span class="line">        gateway_mac, rtu_mac, source_type, packet_id, packet_type, payload_length = struct.unpack(<span class="string">'&gt;QQBIBB'</span>, header)</span><br><span class="line"></span><br><span class="line">        cls = self._identify_class(packet_type, source_type, payload)</span><br><span class="line">        <span class="keyword">if</span> cls:</span><br><span class="line">            <span class="keyword">return</span> cls(gateway_mac, rtu_mac, source_type, packet_id, packet_type, payload_length, payload)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">identify_class</span><span class="params">(self, packet_type, source_type, payload)</span>:</span></span><br><span class="line">        <span class="comment"># 输入为包索引(packet_type, source_type, app_id)</span></span><br><span class="line">        <span class="comment"># 在查询过程中，可能需要经过精确到模糊的查找过程，并不是简单的 dict.get 调用</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="3-查询表-lookup"><a href="#3-查询表-lookup" class="headerlink" title="3 查询表(lookup)"></a>3 查询表(lookup)</h2><h3 id="3-1-构建基本查询表"><a href="#3-1-构建基本查询表" class="headerlink" title="3.1 构建基本查询表"></a>3.1 构建基本查询表</h3><p>包索引即为查询表中的键</p><p>packet.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataPacket</span><span class="params">(PacketBase)</span>:</span></span><br><span class="line">    packet_type = <span class="number">0x01</span></span><br><span class="line">    app_related = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GatewayHeartbeatPacket</span><span class="params">(PacketBase)</span>:</span></span><br><span class="line">    packet_type = <span class="number">0x04</span></span><br><span class="line">    source_catalog = <span class="string">'gateway'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MeshRTUHeartbeatPacket</span><span class="params">(PacketBase)</span>:</span></span><br><span class="line">    packet_type = <span class="number">0x04</span></span><br><span class="line">    source_catalog = <span class="string">'mesh_rtu'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GPRSHeartbeatPacket</span><span class="params">(PacketBase)</span>:</span></span><br><span class="line">    packet_type = <span class="number">0x04</span></span><br><span class="line">    source_catalog = <span class="string">'gprs_rtu'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeSyncPacket</span><span class="params">(PacketBase)</span>:</span></span><br><span class="line">    packet_type = <span class="number">0x06</span></span><br><span class="line">    source_catalog = <span class="number">0x04</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_lookup</span><span class="params">(*args)</span>:</span></span><br><span class="line">    packet_lookup = &#123;&#125;</span><br><span class="line">    app_related_packet_type_set = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> packet_class <span class="keyword">in</span> args:</span><br><span class="line">        packet_lookup[(packet_class.packet_type, packet_class.source_type <span class="keyword">or</span> packet_class.source_type, <span class="keyword">None</span>)] = packet_class</span><br><span class="line">        <span class="keyword">if</span> packet_class.app_related:</span><br><span class="line">            app_related_packet_type_set.add(packet_class.packet_type)</span><br><span class="line">    <span class="keyword">return</span> packet_lookup, app_related_packet_type_set</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个查询表计算过程</span></span><br><span class="line"><span class="comment"># PACKET_LOOKUP, APP_RELATED_PACKET_TYPE_SET = build_lookup(</span></span><br><span class="line"><span class="comment">#    DataPacket,</span></span><br><span class="line"><span class="comment">#    GatewayHeartbeatPacket,</span></span><br><span class="line"><span class="comment">#    GPRSHeartbeatPacket,</span></span><br><span class="line"><span class="comment">#    MeshRTUHeartbeatPacket,</span></span><br><span class="line"><span class="comment">#    TimeSyncPacket</span></span><br><span class="line"><span class="comment"># )</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了下面示例方面，直接给出最后结果</span></span><br><span class="line">PACKET_LOOKUP =  &#123;</span><br><span class="line">  (<span class="number">0x01</span>, <span class="keyword">None</span>, <span class="keyword">None</span>): DataPacket,</span><br><span class="line">  (<span class="number">0x04</span>, <span class="string">'gateway'</span>, <span class="keyword">None</span>): GatewayHeartbeatPacket,</span><br><span class="line">  (<span class="number">0x04</span>, <span class="string">'gprs_rtu'</span>, <span class="keyword">None</span>): GPRSHeartbeatPacket,</span><br><span class="line">  (<span class="number">0x04</span>, <span class="string">'mesh_rtu'</span>, <span class="keyword">None</span>): MeshRTUHeartbeatPacket,</span><br><span class="line">  (<span class="number">0x06</span>, <span class="number">0x04</span>, <span class="keyword">None</span>): TimeSyncPacket</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有与应用相关的包类型集合</span></span><br><span class="line">APP_RELATED_PACKET_TYPE_SET = &#123; <span class="number">0x01</span> &#125;</span><br><span class="line"></span><br><span class="line">SOURCE_TYPE_CATALOG_LOOKUP = &#123;</span><br><span class="line">    <span class="number">0x01</span>: <span class="string">'mesh_rtu'</span>,</span><br><span class="line">    <span class="number">0x02</span>: <span class="string">'gprs_rtu'</span>,</span><br><span class="line">    <span class="number">0x03</span>: <span class="string">'gateway'</span>,</span><br><span class="line">    <span class="number">0x04</span>: <span class="string">'gateway'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SOURCE_CATALOG_SET = &#123;<span class="string">'gateway'</span>, <span class="string">'mesh_rtu'</span>, <span class="string">'gprs_rtu'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-基于应用协议扩展识别规则查询表"><a href="#3-2-基于应用协议扩展识别规则查询表" class="headerlink" title="3.2 基于应用协议扩展识别规则查询表"></a>3.2 基于应用协议扩展识别规则查询表</h3><p>注册应用协议实际为上述查询表增加了更加精确的匹配规则，当本应用协议的包类对象无法使用才会使用基本的包类对象。在添加匹配规则时：</p><ul><li>应用类型：应用类型不能与已有的冲突</li><li>包类型：只能注册那些与应用相关的类型的包(类型存储在 <code>APP_RELATED_PACKET_TYPE_SET</code>)，因为与应用无关的包没有存储应用类型字段，识别时无法分发。</li><li>源类型和源分类<ul><li>使用已有的设备分类，对应于若干种设备</li><li>使用已有的设备类型</li><li>使用新的设备类型，不能和已有的相冲突，同时必须指定设备分类</li></ul></li></ul><p>实现过程如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">from</span> .packet <span class="keyword">import</span> PACKET_LOOKUP, APP_RELATED_PACKET_TYPE_SET, SOURCE_CATALOG_SET, SOURCE_TYPE_CATALOG_LOOKUP</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Engine</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._packet_lookup = copy.copy(PACKET_LOOKUP) <span class="comment"># 包类对象查询表，为(packet_type, source_type, app_id)到包类对象的映射</span></span><br><span class="line">        self._source_type_catalog_lookup = copy.copy(SOURCE_TYPE_CATALOG_LOOKUP)</span><br><span class="line">        self._protocol_lookup = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">register_protocol</span><span class="params">(self, protocol_class)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> protocol_class.app_id <span class="keyword">in</span> self._protocol_lookup:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'The app_id value &#123;&#125; in the &#123;&#125; has conflicted!'</span>.format(protocol_class.app_id, protocol_class.__name__))</span><br><span class="line">        self._protocol_lookup[protocol_class.app_id] = protocol_class</span><br><span class="line">        <span class="keyword">for</span> packet_class <span class="keyword">in</span> protocol_class.packet_lookup:</span><br><span class="line">            self.add_lookup_item(packet_class.packet_type, protocol_class.source_catalog, protocol_class.source_type, protocol_class.app_id, protocol_class)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_lookup_item</span><span class="params">(self, packet_type, source_catalog, source_type, app_id, packet_class)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> packet_type <span class="keyword">not</span> <span class="keyword">in</span> APP_RELATED_PACKET_TYPE_SET:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'Protocol Register with packet_type &#123;&#125; is not supported!'</span>.format(packet_type))</span><br><span class="line">        <span class="keyword">if</span> source_type <span class="keyword">in</span> self._source_type_catalog_lookup:</span><br><span class="line">            self._packet_lookup[(packet_type, source_type, protocol_class.app_id)] = packet_class</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> source_catalog <span class="keyword">in</span> SOURCE_CATALOG_SET:</span><br><span class="line">                self._packet_lookup[(packet_type, source_catalog, protocol_class.app_id)] = packet_class</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">'Invalid source_catalog'</span>)</span><br></pre></td></tr></table></figure><h3 id="3-3-使用方法和测试案例"><a href="#3-3-使用方法和测试案例" class="headerlink" title="3.3 使用方法和测试案例"></a>3.3 使用方法和测试案例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HydrantDataPacket</span><span class="params">(DataPacket)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HydrantProtocol</span><span class="params">(AppProtocolBase)</span>:</span></span><br><span class="line">    app_id = <span class="number">0x0A</span></span><br><span class="line">    packet_lookup = &#123; HydrantDataPacket &#125;</span><br><span class="line"></span><br><span class="line">engine = Engine()</span><br><span class="line"></span><br><span class="line">engine.register_protocol(HydrantProtocol)</span><br><span class="line"></span><br><span class="line">payload = struct.pack(<span class="string">'&gt;BBBBB'</span>, <span class="number">0x0A</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">test_binary = struct.pack(<span class="string">'&gt;QQBIBB'</span>, <span class="number">70971071088567232</span>, <span class="number">70971071088567240</span>, <span class="number">13</span>, <span class="number">0x01</span>, <span class="number">5</span>) + payload</span><br><span class="line"></span><br><span class="line">packet = engine.indentfity(test_binary)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> isinstance(packet, HydrantProtocol) == <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h2 id="4-识别匹配"><a href="#4-识别匹配" class="headerlink" title="4 识别匹配"></a>4 识别匹配</h2><ul><li>查询 (packet_tpye, source_type, None)<ul><li>是：计算app_id，查询(packet_tpye, source_catalog, app_id)<ul><li>是：使用(packet_tpye, source_catalog, app_id)</li><li>否：使用(packet_tpye, source_type, None)</li></ul></li><li>否：当前packet_tpye是否有app_id<ul><li>是：计算app_id，查询 (packet_tpye, source_catalog, app_id)<ul><li>是：使用 (packet_tpye, source_catalog, app_id)</li><li>否：无法识别</li></ul></li><li>否：查询 (packet_tpye, source_catalog, None)<ul><li>是：使用(packet_tpye, source_catalog, None)</li><li>否：无法识别</li></ul></li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Engine</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">identify_class</span><span class="params">(self, packet_type, source_type, payload)</span></span></span><br><span class="line">      cls = self._packet_lookup.get((packet_type, source_type, None))</span><br><span class="line">         <span class="keyword">if</span> cls:</span><br><span class="line">             source_type_or_catalog = source_type</span><br><span class="line">         <span class="keyword">else</span>:</span><br><span class="line">             source_catalog = self._source_type_catalog_lookup.get(source_type)</span><br><span class="line">             cls = self._packet_lookup.get((packet_type, source_catalog, <span class="keyword">None</span>))</span><br><span class="line">             <span class="keyword">if</span> cls:</span><br><span class="line">                 source_type_or_catalog = source_catalog</span><br><span class="line">             <span class="keyword">else</span>:</span><br><span class="line">                 source_type_or_catalog = <span class="keyword">None</span></span><br><span class="line">         <span class="keyword">if</span> packet_type <span class="keyword">in</span> APP_PACKET_TYPE_LOOKUP <span class="keyword">and</span> cls:</span><br><span class="line">             app_id = cls.parse_app_id()</span><br><span class="line">             t_cls = self._packet_lookup.get((packet_type, source_type_or_catalog, app_id))</span><br><span class="line">             <span class="keyword">if</span> t_cls:</span><br><span class="line">                 cls = t_cls</span><br><span class="line">         <span class="keyword">return</span> cls</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于工厂模式的包识别引擎设计，和一般工厂模式不同是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匹配规则查询表中是一个树形结构，既有精确规则，又有模糊规则，匹配的过程需要多次查询的操作，从精确到模糊直至无法匹配。&lt;/li&gt;
&lt;li&gt;匹配规则查询表能够支持添加新规则操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-问题描述&quot;&gt;&lt;a href=&quot;#1-问题描述&quot; class=&quot;headerlink&quot; title=&quot;1 问题描述&quot;&gt;&lt;/a&gt;1 问题描述&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;A NMS基础协议&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;NMS是服务器与硬件设备(具体为RTU或者网关)工作的通信协议，协议格式描述如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;网关地址&lt;/th&gt;
&lt;th&gt;节点地址&lt;/th&gt;
&lt;th&gt;源类型&lt;/th&gt;
&lt;th&gt;包序号&lt;/th&gt;
&lt;th&gt;包类型&lt;/th&gt;
&lt;th&gt;负载长度&lt;/th&gt;
&lt;th&gt;负载&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;gateway_mac&lt;/td&gt;
&lt;td&gt;rtu_mac&lt;/td&gt;
&lt;td&gt;source_type&lt;/td&gt;
&lt;td&gt;packet_id&lt;/td&gt;
&lt;td&gt;packet_type&lt;/td&gt;
&lt;td&gt;payload_length&lt;/td&gt;
&lt;td&gt;payload&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;前23字节为包头部，各个字段描述如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网关地址：64位长整型，显示为十六进制形式。&lt;/li&gt;
&lt;li&gt;节点地址：64位长整型，显示为十六进制形式。&lt;/li&gt;
&lt;li&gt;源类型：表示哪一种设备，主要有 Gateway/GPRS-RTU/Mesh-RTU 三种类型的设备。&lt;/li&gt;
&lt;li&gt;包序号：32位整数，0 - 4294967295 。&lt;/li&gt;
&lt;li&gt;包类型：该包的类型。&lt;/li&gt;
&lt;li&gt;负载长度：整数0-255，表示后面的负载长度，实际中负载长度小于255。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://kinegratii.github.io/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="Python" scheme="http://kinegratii.github.io/tags/Python/"/>
    
      <category term="设计模式" scheme="http://kinegratii.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>机器学习（一） —— 准备工作</title>
    <link href="http://kinegratii.github.io/2017/03/29/start-machine-learning/"/>
    <id>http://kinegratii.github.io/2017/03/29/start-machine-learning/</id>
    <published>2017-03-29T02:38:29.000Z</published>
    <updated>2018-05-01T13:50:30.451Z</updated>
    
    <content type="html"><![CDATA[<p>使用Python开发web已经有一两年的时间了，是时候在业余时间接触下其他领域了。Python被称为“胶水语言”，在各个领域都占有一席之地，除了web开发之外，近年来在人工智能/机器学习也得到了广泛的应用。随着信息技术的不断发展，人工智能/机器学习也越来越受到欢。另一方面和web开发不同的是理论研究在机器学习中占有很大的比重。</p><a id="more"></a><h2 id="入门资料"><a href="#入门资料" class="headerlink" title="入门资料"></a>入门资料</h2><p>在决定入机器学习这个领域，自己也大致搜索了各方面的资料，从以下教程入门，网上也有相关的电子资源。</p><ul><li>《离散学习机器应用（原书第6版）》：图论、命题逻辑</li><li>《algorithms-in-python》：Python的算法书</li><li>《数据科学入门》：线性代数、统计概率等一些基础知识</li><li>《Python科学计算》：numpy等包的使用</li><li>《机器学习实战》：基于Python的各种算法实现</li><li>《机器学习导论》：理论阐述</li></ul><p>昨晚刚读完《机器学习实战》第二章有关k近邻算法的内容，感觉这本书对于理论部分讲述的很少，后来又找来了《机器学习导论》这本书，两本书一起看，理论和实践相结合，应该会发挥更好地效果。</p><h2 id="库安装"><a href="#库安装" class="headerlink" title="库安装"></a>库安装</h2><p>Python3下安装一些基本库就比较简单了，matplotlib和numpy都可以用pip命令安装。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这是万里旅行的第一步，谨此记录，期许有个美好的开始。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Python开发web已经有一两年的时间了，是时候在业余时间接触下其他领域了。Python被称为“胶水语言”，在各个领域都占有一席之地，除了web开发之外，近年来在人工智能/机器学习也得到了广泛的应用。随着信息技术的不断发展，人工智能/机器学习也越来越受到欢。另一方面和web开发不同的是理论研究在机器学习中占有很大的比重。&lt;/p&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://kinegratii.github.io/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="机器学习" scheme="http://kinegratii.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
